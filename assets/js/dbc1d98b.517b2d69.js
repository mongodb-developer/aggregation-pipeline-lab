"use strict";(self.webpackChunkaggregation_pipeline_workshop=self.webpackChunkaggregation_pipeline_workshop||[]).push([["4110"],{2217:function(e,n,a){a.r(n),a.d(n,{default:()=>g,frontMatter:()=>i,metadata:()=>t,assets:()=>d,toc:()=>h,contentTitle:()=>c});var t=JSON.parse('{"id":"simple-queries/match","title":"\uD83D\uDC50 $match","description":"The $match stage filters documents in a collection. It takes a document as input (your filter) and returns the documents that match the specified criteria. The syntax for the $match stage is as follows:","source":"@site/docs/30-simple-queries/2-match.mdx","sourceDirName":"30-simple-queries","slug":"/simple-queries/match","permalink":"/aggregation-pipeline-lab/docs/simple-queries/match","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/aggregation-pipeline-lab/blob/main/docs/30-simple-queries/2-match.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\uD83D\uDC50 Empty Aggregation Pipeline","permalink":"/aggregation-pipeline-lab/docs/simple-queries/empty-aggregation"},"next":{"title":"\uD83D\uDC50 $project","permalink":"/aggregation-pipeline-lab/docs/simple-queries/project"}}'),s=a("5893"),r=a("65"),l=a("8168"),o=a("7645");let i={},c="\uD83D\uDC50 $match",d={},h=[{value:"Expressions",id:"expressions",level:2},{value:"Matching book documents",id:"matching-book-documents",level:2},{value:"AND",id:"and",level:2},{value:"Shorthand AND",id:"shorthand-and",level:3}];function u(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components},{Details:a,Screenshot:t}=n;return a||p("Details",!0),t||p("Screenshot",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"-match",children:"\uD83D\uDC50 $match"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/operator/aggregation/match/",children:"$match"})," stage filters documents in a collection. It takes a document as input (your filter) and returns the documents that match the specified criteria. The syntax for the $match stage is as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"{ $match: { <expression>: <value> } }\n"})}),"\n",(0,s.jsx)(n.h2,{id:"expressions",children:"Expressions"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"<expression>"})," portion of the $match stage can be any valid MongoDB expression. This includes:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Comparison operators: ",(0,s.jsx)(n.code,{children:"eq"}),", ",(0,s.jsx)(n.code,{children:"neq"}),", ",(0,s.jsx)(n.code,{children:"gte"}),", ",(0,s.jsx)(n.code,{children:"lte"}),", ",(0,s.jsx)(n.code,{children:"gt"}),", ",(0,s.jsx)(n.code,{children:"lt"}),", ",(0,s.jsx)(n.code,{children:"in"}),", ",(0,s.jsx)(n.code,{children:"nin"}),", ",(0,s.jsx)(n.code,{children:"exists"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Regular expressions: regex."}),"\n",(0,s.jsx)(n.li,{children:"Logical operators: and, or, not."}),"\n",(0,s.jsxs)(n.li,{children:["Subdocuments and arrays: ",(0,s.jsx)(n.code,{children:"{ field: <value> }, [ <item>, <item>, ... ]"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"matching-book-documents",children:"Matching book documents"}),"\n",(0,s.jsxs)(l.Z,{groupId:"aggregations",children:[(0,s.jsxs)(o.Z,{value:"atlas",label:"Atlas UI",children:[(0,s.jsxs)(n.p,{children:["First, make sure you select the ",(0,s.jsx)(n.code,{children:"books"})," collection in the Atlas UI."]}),(0,s.jsx)(t,{src:"/img/30-simple-queries/select-books-collection.png",url:"http://cloud.mongodb.com/",alt:"Atlas UI database deployment with the books collection highlighted."}),(0,s.jsxs)(n.p,{children:["Then, navigate to the ",(0,s.jsx)(n.code,{children:"Aggregation"})," tab and click ",(0,s.jsx)(n.code,{children:"</> TEXT"}),"."]}),(0,s.jsx)(t,{src:"/img/30-simple-queries/new-aggregation.png",url:"http://cloud.mongodb.com/",alt:"Atlas UI database deployment with aggregation tab highlighted."}),(0,s.jsxs)(n.p,{children:["Say we want all the books from the year 2010. We can add a ",(0,s.jsx)(n.code,{children:"$match"})," stage to filter the documents from the books collection:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"[\n    {\n        $match: { year: 2010 }\n    }\n]\n"})}),(0,s.jsx)(t,{src:"/img/30-simple-queries/match-screenshot.png",url:"http://cloud.mongodb.com/",alt:"Atlas AI $match aggregation."})]}),(0,s.jsxs)(o.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:[(0,s.jsx)(n.p,{children:"Say we want all the books from 2010. We'll write:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"db.books.aggregate([\n  {\n    $match: {year: 2010}\n  }\n])\n"})})]})]}),"\n",(0,s.jsxs)(n.p,{children:["\uD83D\uDC50 Return all the ",(0,s.jsx)(n.code,{children:"books"})," that have exactly 100 pages."]}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Answer"}),(0,s.jsx)("div",{children:(0,s.jsxs)(l.Z,{groupId:"aggregations",children:[(0,s.jsx)(o.Z,{value:"atlas",label:"Atlas UI",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"[\n  {\n    $match: { pages: 100 }\n  }\n]\n"})})}),(0,s.jsx)(o.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"db.books.aggregate([\n  {\n    $match: { pages: 100 }\n  }\n])\n"})})})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"and",children:"AND"}),"\n",(0,s.jsxs)(n.p,{children:["If we need to add more conditions using AND, we use the ",(0,s.jsx)(n.code,{children:"$and"})," operator."]}),"\n",(0,s.jsxs)(n.p,{children:["If we want all the books with 100 pages and with exactly ",(0,s.jsx)(n.code,{children:"totalInventory"})," 1, we can use the ",(0,s.jsx)(n.code,{children:"$and"})," operator. It takes an array of documents with all the conditions that should be true for the AND to succeed:"]}),"\n",(0,s.jsxs)(l.Z,{groupId:"aggregations",children:[(0,s.jsx)(o.Z,{value:"atlas",label:"Atlas UI",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"[\n  {\n    $match: {\n      $and: [\n        { pages: 100 },\n        { totalInventory: 1 }\n      ]\n    }\n  }\n]\n"})})}),(0,s.jsx)(o.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"db.books.aggregate([\n  {\n    $match: { \n      $and: [\n        { pages: 100 }, \n        { totalInventory: 1 }\n      ]\n    }\n  }\n])\n"})})})]}),"\n",(0,s.jsx)(n.p,{children:"The pseudo-code for this would be something like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"IF pages == 100 AND totalInventory == 1 {\n    return matching docs\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\uD83D\uDC50 Return all the ",(0,s.jsx)(n.code,{children:"books"})," from 2015 that have exactly 100 pages."]}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Answer"}),(0,s.jsx)("div",{children:(0,s.jsxs)(l.Z,{groupId:"aggregations",children:[(0,s.jsx)(o.Z,{value:"atlas",label:"Atlas UI",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"[\n  {\n    $match: {\n      $and: [\n        { pages: 100 },\n        { year: 2015 }\n      ]\n    }\n  }\n]\n"})})}),(0,s.jsx)(o.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"db.books.aggregate([\n  { \n    $match: {\n      $and: [\n        { pages: 100 }, \n        { year: 2015 }\n      ]\n    } \n  }\n])\n"})})})]})})]}),"\n",(0,s.jsxs)(n.p,{children:["\uD83D\uDC50 How many are there? We haven't yet seen the ",(0,s.jsx)(n.code,{children:"$count"})," stage, but try to add a second stage to your pipeline with ",(0,s.jsx)(n.code,{children:'{ $count: "books_count" }'}),"."]}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Answer"}),(0,s.jsx)("div",{children:(0,s.jsxs)(l.Z,{groupId:"aggregations",children:[(0,s.jsx)(o.Z,{value:"atlas",label:"Atlas UI",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'[\n    {\n        $match: {\n            $and: [\n                { pages: 100 },\n                { year: 2015 }\n            ]\n        }\n    },\n    {\n        $count: "books_count"\n    }\n]\n'})})}),(0,s.jsx)(o.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'db.books.aggregate(\n  [\n    { $match: {$and: [{pages: 100}, {year: 2015}]} },\n    { $count: "books_count" }\n  ]\n)\n'})})})]})})]}),"\n",(0,s.jsx)(n.h3,{id:"shorthand-and",children:"Shorthand AND"}),"\n",(0,s.jsx)(n.p,{children:"We can do an implicit AND just passing a document with all the conditions (instead of an array of documents):"}),"\n",(0,s.jsxs)(l.Z,{groupId:"aggregations",children:[(0,s.jsx)(o.Z,{value:"atlas",label:"Atlas UI",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"[\n  {\n    $match: { pages: 100, totalInventory: 2 }\n  }\n]\n"})})}),(0,s.jsx)(o.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"db.books.aggregate([\n  {\n    $match: { pages: 100, totalInventory: 2 }\n  }\n])\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:["\uD83D\uDC50 Return all the ",(0,s.jsx)(n.code,{children:"books"})," from 2015 that have exactly 100 pages, using the shorthand ",(0,s.jsx)(n.code,{children:"$and"})," notation:"]}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"Answer"}),(0,s.jsx)("div",{children:(0,s.jsxs)(l.Z,{groupId:"aggregations",children:[(0,s.jsx)(o.Z,{value:"atlas",label:"Atlas UI",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"[\n    {\n        $match: {pages: 100, year: 2015}\n    }\n]\n"})})}),(0,s.jsx)(o.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"db.books.aggregate([{$match: {pages: 100, year: 2015}}])\n"})})})]})})]})]})}function g(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}function p(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},7645:function(e,n,a){a.d(n,{Z:()=>r});var t=a("5893");a("7294");var s=a("4904");function r(e){let{children:n,hidden:a,className:r}=e;return(0,t.jsx)("div",{role:"tabpanel",className:(0,s.Z)("tabItem_Ymn6",r),hidden:a,children:n})}},8168:function(e,n,a){a.d(n,{Z:()=>b});var t=a("5893"),s=a("7294"),r=a("4904"),l=a("4718"),o=a("6550"),i=a("8714"),c=a("9207"),d=a("9413"),h=a("4510");function u(e){return s.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||s.isValidElement(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function g(e){let{value:n,tabValues:a}=e;return a.some(e=>e.value===n)}var p=a("6735");function m(e){let{className:n,block:a,selectedValue:s,selectValue:o,tabValues:i}=e,c=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),h=e=>{let n=e.currentTarget,a=i[c.indexOf(n)].value;a!==s&&(d(n),o(a))},u=e=>{let n=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{let a=c.indexOf(e.currentTarget)+1;n=c[a]??c[0];break}case"ArrowLeft":{let a=c.indexOf(e.currentTarget)-1;n=c[a]??c[c.length-1]}}n?.focus()};return(0,t.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},n),children:i.map(e=>{let{value:n,label:a,attributes:l}=e;return(0,t.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>{c.push(e)},onKeyDown:u,onClick:h,...l,className:(0,r.Z)("tabs__item","tabItem_LNqP",l?.className,{"tabs__item--active":s===n}),children:a??n},n)})})}function x(e){let{lazy:n,children:a,selectedValue:l}=e,o=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){let e=o.find(e=>e.props.value===l);return e?(0,s.cloneElement)(e,{className:(0,r.Z)("margin-top--md",e.props.className)}):null}return(0,t.jsx)("div",{className:"margin-top--md",children:o.map((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==l}))})}function j(e){let n=function(e){let{defaultValue:n,queryString:a=!1,groupId:t}=e,r=function(e){let{values:n,children:a}=e;return(0,s.useMemo)(()=>{let e=n??u(a).map(e=>{let{props:{value:n,label:a,attributes:t,default:s}}=e;return{value:n,label:a,attributes:t,default:s}});return!function(e){let n=(0,d.lx)(e,(e,n)=>e.value===n.value);if(n.length>0)throw Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,a])}(e),[l,p]=(0,s.useState)(()=>(function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!g({value:n,tabValues:a}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}let t=a.find(e=>e.default)??a[0];if(!t)throw Error("Unexpected error: 0 tabValues");return t.value})({defaultValue:n,tabValues:r})),[m,x]=function(e){let{queryString:n=!1,groupId:a}=e,t=(0,o.k6)(),r=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,c._X)(r),(0,s.useCallback)(e=>{if(!r)return;let n=new URLSearchParams(t.location.search);n.set(r,e),t.replace({...t.location,search:n.toString()})},[r,t])]}({queryString:a,groupId:t}),[j,b]=function(e){let{groupId:n}=e,a=n?`docusaurus.tab.${n}`:null,[t,r]=(0,h.Nk)(a);return[t,(0,s.useCallback)(e=>{a&&r.set(e)},[a,r])]}({groupId:t}),f=(()=>{let e=m??j;return g({value:e,tabValues:r})?e:null})();return(0,i.Z)(()=>{f&&p(f)},[f]),{selectedValue:l,selectValue:(0,s.useCallback)(e=>{if(!g({value:e,tabValues:r}))throw Error(`Can't select invalid tab value=${e}`);p(e),x(e),b(e)},[x,b,r]),tabValues:r}}(e);return(0,t.jsxs)("div",{className:(0,r.Z)("tabs-container","tabList__CuJ"),children:[(0,t.jsx)(m,{...n,...e}),(0,t.jsx)(x,{...n,...e})]})}function b(e){let n=(0,p.Z)();return(0,t.jsx)(j,{...e,children:u(e.children)},String(n))}},65:function(e,n,a){a.d(n,{Z:function(){return o},a:function(){return l}});var t=a(7294);let s={},r=t.createContext(s);function l(e){let n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);