"use strict";(self.webpackChunkaggregation_pipeline_workshop=self.webpackChunkaggregation_pipeline_workshop||[]).push([[4389],{9670:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>g,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var r=a(4848),t=a(8453),s=a(1470),o=a(9365);const l={},i="\ud83d\udc50 Simple Array Queries",c={id:"using-arrays/simple-match-array",title:"\ud83d\udc50 Simple Array Queries",description:"Find data in arrays",source:"@site/docs/40-using-arrays/1-simple-match-array.mdx",sourceDirName:"40-using-arrays",slug:"/using-arrays/simple-match-array",permalink:"/aggregation-pipeline-lab/docs/using-arrays/simple-match-array",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/aggregation-pipeline-lab/blob/main/docs/40-using-arrays/1-simple-match-array.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Using Arrays",permalink:"/aggregation-pipeline-lab/docs/category/using-arrays"},next:{title:"\ud83d\udc50 Searching inside Objects in arrays",permalink:"/aggregation-pipeline-lab/docs/using-arrays/search-inside-objects-in-arrays"}},u={},d=[{value:"Find data in arrays",id:"find-data-in-arrays",level:2},{value:"Size of an array",id:"size-of-an-array",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components},{Details:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"-simple-array-queries",children:"\ud83d\udc50 Simple Array Queries"})}),"\n",(0,r.jsx)(n.h2,{id:"find-data-in-arrays",children:"Find data in arrays"}),"\n",(0,r.jsxs)(n.p,{children:["A JSON array can contain scalar values or objects. In our data, ",(0,r.jsx)(n.code,{children:"authors"})," have an array of the books they've authored (their ISBNs as Strings). Let's get one author:"]}),"\n",(0,r.jsxs)(s.A,{groupId:"aggregations",children:[(0,r.jsxs)(o.A,{value:"atlas",label:"Atlas UI",children:[(0,r.jsxs)(n.p,{children:["Remember to select the ",(0,r.jsx)(n.code,{children:"authors"})," collection in the UI."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"[\n  { $limit: 1 }\n]\n"})})]}),(0,r.jsx)(o.A,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"db.authors.aggregate([\n  { $limit: 1 }\n])\n"})})})]}),"\n",(0,r.jsx)(n.p,{children:"\ud83d\udc50 Run this aggregation to get one author."}),"\n",(0,r.jsx)(n.p,{children:"I got this one. (It can change depending on the data source you imported.)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"{\n  _id: ObjectId(\"64cc2db4830ba29148da4c3b\"),\n  name: 'Richard Bruce Wright',\n  sanitizedName: 'richardbrucewright',\n  books: [\n    '0002005018'\n  ],\n  aliases: [\n    'Wright, Richard Bruce'\n  ]\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Can I get all authors for book ",(0,r.jsx)(n.code,{children:"0002005018"}),"? For that, I want all authors that have ",(0,r.jsx)(n.code,{children:"0002005018"})," inside the ",(0,r.jsx)(n.code,{children:"books"})," array. Turns out it's quite simple:"]}),"\n",(0,r.jsxs)(s.A,{groupId:"aggregations",children:[(0,r.jsx)(o.A,{value:"atlas",label:"Atlas UI",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'[\n  {$match: {books: "0002005018"}}\n]\n'})})}),(0,r.jsx)(o.A,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'db.authors.aggregate([\n  {$match: {books: "0002005018"}}\n])\n'})})})]}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udc50 Get the book's author name for ISBN ",(0,r.jsx)(n.code,{children:"0395623650"}),":"]}),"\n",(0,r.jsxs)(a,{children:[(0,r.jsx)("summary",{children:"Answer"}),(0,r.jsx)("div",{children:(0,r.jsxs)(s.A,{groupId:"aggregations",children:[(0,r.jsxs)(o.A,{value:"atlas",label:"Atlas UI",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'[\n  { $match: {books: "0395623650"} }\n]\n'})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:">   name: 'Juan Ram\xf3n Jim\xe9nez',\n"})})]}),(0,r.jsxs)(o.A,{value:"mongodb-shell",label:"MongoDB Shell",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'db.authors.aggregate([\n  { $match: {books: "0395623650"} }\n])\n'})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:">   name: 'Juan Ram\xf3n Jim\xe9nez',\n"})})]})]})})]}),"\n",(0,r.jsx)(n.h2,{id:"size-of-an-array",children:"Size of an array"}),"\n",(0,r.jsxs)(n.p,{children:["What if we want to know how many aliases an author has? To do that, we can use ",(0,r.jsx)(n.code,{children:"$size"}),", adding the array field that we're interested in:"]}),"\n",(0,r.jsxs)(s.A,{groupId:"aggregations",children:[(0,r.jsx)(o.A,{value:"atlas",label:"Atlas UI",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'[\n  { $project: {\n      name: 1,\n      bookCount: {$size: "$books"}\n    }\n  },\n]\n'})})}),(0,r.jsx)(o.A,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'db.authors.aggregate([\n  { $project: {\n      name: 1,\n      bookCount: {$size: "$books"}\n    }\n  },\n])\n'})})})]}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udc50 Who wrote the most books? (We can sort using ",(0,r.jsx)(n.code,{children:'{ $sort: {"bookCount": -1}}'}),".)"]}),"\n",(0,r.jsxs)(a,{children:[(0,r.jsx)("summary",{children:"Answer"}),(0,r.jsx)("div",{children:(0,r.jsxs)(s.A,{groupId:"aggregations",children:[(0,r.jsx)(o.A,{value:"atlas",label:"Atlas UI",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'[\n  {\n    $project: {\n        name: 1,\n        bookCount: {$size: "$books"}\n    }\n  },\n  { $sort: {"bookCount": -1} },\n  { $limit: 1 }\n]\n'})})}),(0,r.jsx)(o.A,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'let addNumberBooks = {\n  $project: {\n      name: 1,\n      bookCount: {$size: "$books"}\n  }\n}\n\nlet orderByNumberOfBooksDesc = { $sort: {"bookCount": -1} }\n\nlet getOne = { $limit: 1 }\n\ndb.authors.aggregate([\n  addNumberBooks,\n  orderByNumberOfBooksDesc,\n  getOne,\n])\n'})})})]})})]})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},9365:(e,n,a)=>{a.d(n,{A:()=>o});a(6540);var r=a(8215);const t={tabItem:"tabItem_Ymn6"};var s=a(4848);function o(e){let{children:n,hidden:a,className:o}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(t.tabItem,o),hidden:a,children:n})}},1470:(e,n,a)=>{a.d(n,{A:()=>k});var r=a(6540),t=a(8215),s=a(3104),o=a(6347),l=a(205),i=a(7485),c=a(1682),u=a(679);function d(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:a}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:a,attributes:r,default:t}}=e;return{value:n,label:a,attributes:r,default:t}}))}(a);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function g(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:a}=e;const t=(0,o.W6)(),s=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,i.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(t.location.search);n.set(s,e),t.replace({...t.location,search:n.toString()})}),[s,t])]}function m(e){const{defaultValue:n,queryString:a=!1,groupId:t}=e,s=h(e),[o,i]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!g({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=a.find((e=>e.default))??a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:s}))),[c,d]=p({queryString:a,groupId:t}),[m,b]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,s]=(0,u.Dv)(a);return[t,(0,r.useCallback)((e=>{a&&s.set(e)}),[a,s])]}({groupId:t}),j=(()=>{const e=c??m;return g({value:e,tabValues:s})?e:null})();(0,l.A)((()=>{j&&i(j)}),[j]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!g({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);i(e),d(e),b(e)}),[d,b,s]),tabValues:s}}var b=a(2303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=a(4848);function f(e){let{className:n,block:a,selectedValue:r,selectValue:o,tabValues:l}=e;const i=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),u=e=>{const n=e.currentTarget,a=i.indexOf(n),t=l[a].value;t!==r&&(c(n),o(t))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const a=i.indexOf(e.currentTarget)+1;n=i[a]??i[0];break}case"ArrowLeft":{const a=i.indexOf(e.currentTarget)-1;n=i[a]??i[i.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":a},n),children:l.map((e=>{let{value:n,label:a,attributes:s}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>i.push(e),onKeyDown:d,onClick:u,...s,className:(0,t.A)("tabs__item",j.tabItem,s?.className,{"tabs__item--active":r===n}),children:a??n},n)}))})}function v(e){let{lazy:n,children:a,selectedValue:s}=e;const o=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function y(e){const n=m(e);return(0,x.jsxs)("div",{className:(0,t.A)("tabs-container",j.tabList),children:[(0,x.jsx)(f,{...n,...e}),(0,x.jsx)(v,{...n,...e})]})}function k(e){const n=(0,b.A)();return(0,x.jsx)(y,{...e,children:d(e.children)},String(n))}},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>l});var r=a(6540);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);