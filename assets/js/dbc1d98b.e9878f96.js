"use strict";(self.webpackChunkaggregation_pipeline_workshop=self.webpackChunkaggregation_pipeline_workshop||[]).push([["4110"],{2881:function(e,n,a){a.r(n),a.d(n,{frontMatter:()=>i,default:()=>g,toc:()=>h,metadata:()=>s,assets:()=>d,contentTitle:()=>c});var s=JSON.parse('{"id":"simple-queries/match","title":"\uD83D\uDC50 $match","description":"The $match stage filters documents in a collection. It takes a document as input (your filter) and returns the documents that match the specified criteria. The syntax for the $match stage is as follows:","source":"@site/docs/30-simple-queries/2-match.mdx","sourceDirName":"30-simple-queries","slug":"/simple-queries/match","permalink":"/aggregation-pipeline-lab/docs/simple-queries/match","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/aggregation-pipeline-lab/blob/main/docs/30-simple-queries/2-match.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\uD83D\uDC50 Empty Aggregation Pipeline","permalink":"/aggregation-pipeline-lab/docs/simple-queries/empty-aggregation"},"next":{"title":"\uD83D\uDC50 $project","permalink":"/aggregation-pipeline-lab/docs/simple-queries/project"}}'),t=a(5893),r=a(65),l=a(7902),o=a(5525);let i={},c="\uD83D\uDC50 $match",d={},h=[{value:"Expressions",id:"expressions",level:2},{value:"Matching book documents",id:"matching-book-documents",level:2},{value:"AND",id:"and",level:2},{value:"Shorthand AND",id:"shorthand-and",level:3}];function u(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components},{Details:a,Screenshot:s}=n;return a||p("Details",!0),s||p("Screenshot",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"-match",children:"\uD83D\uDC50 $match"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/operator/aggregation/match/",children:"$match"})," stage filters documents in a collection. It takes a document as input (your filter) and returns the documents that match the specified criteria. The syntax for the $match stage is as follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"{ $match: { <expression>: <value> } }\n"})}),"\n",(0,t.jsx)(n.h2,{id:"expressions",children:"Expressions"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"<expression>"})," portion of the $match stage can be any valid MongoDB expression. This includes:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Comparison operators: ",(0,t.jsx)(n.code,{children:"eq"}),", ",(0,t.jsx)(n.code,{children:"neq"}),", ",(0,t.jsx)(n.code,{children:"gte"}),", ",(0,t.jsx)(n.code,{children:"lte"}),", ",(0,t.jsx)(n.code,{children:"gt"}),", ",(0,t.jsx)(n.code,{children:"lt"}),", ",(0,t.jsx)(n.code,{children:"in"}),", ",(0,t.jsx)(n.code,{children:"nin"}),", ",(0,t.jsx)(n.code,{children:"exists"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Regular expressions: regex."}),"\n",(0,t.jsx)(n.li,{children:"Logical operators: and, or, not."}),"\n",(0,t.jsxs)(n.li,{children:["Subdocuments and arrays: ",(0,t.jsx)(n.code,{children:"{ field: <value> }, [ <item>, <item>, ... ]"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"matching-book-documents",children:"Matching book documents"}),"\n",(0,t.jsxs)(l.Z,{groupId:"aggregations",children:[(0,t.jsxs)(o.Z,{value:"atlas",label:"Atlas UI",children:[(0,t.jsxs)(n.p,{children:["First, make sure you select the ",(0,t.jsx)(n.code,{children:"books"})," collection in the Atlas UI."]}),(0,t.jsx)(s,{src:"/img/30-simple-queries/select-books-collection.png",url:"http://cloud.mongodb.com/",alt:"Atlas UI database deployment with the books collection highlighted."}),(0,t.jsxs)(n.p,{children:["Then, navigate to the ",(0,t.jsx)(n.code,{children:"Aggregation"})," tab and click ",(0,t.jsx)(n.code,{children:"</> TEXT"}),"."]}),(0,t.jsx)(s,{src:"/img/30-simple-queries/new-aggregation.png",url:"http://cloud.mongodb.com/",alt:"Atlas UI database deployment with aggregation tab highlighted."}),(0,t.jsxs)(n.p,{children:["Say we want all the books from the year 2010. We can add a ",(0,t.jsx)(n.code,{children:"$match"})," stage to filter the documents from the books collection:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"[\n    {\n        $match: { year: 2010 }\n    }\n]\n"})}),(0,t.jsx)(s,{src:"/img/30-simple-queries/match-screenshot.png",url:"http://cloud.mongodb.com/",alt:"Atlas AI $match aggregation."})]}),(0,t.jsxs)(o.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:[(0,t.jsx)(n.p,{children:"Say we want all the books from 2010. We'll write:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"db.books.aggregate([\n  {\n    $match: {year: 2010}\n  }\n])\n"})})]})]}),"\n",(0,t.jsxs)(n.p,{children:["\uD83D\uDC50 Return all the ",(0,t.jsx)(n.code,{children:"books"})," that have exactly 100 pages."]}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:"Answer"}),(0,t.jsx)("div",{children:(0,t.jsxs)(l.Z,{groupId:"aggregations",children:[(0,t.jsx)(o.Z,{value:"atlas",label:"Atlas UI",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"[\n  {\n    $match: { pages: 100 }\n  }\n]\n"})})}),(0,t.jsx)(o.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"db.books.aggregate([\n  {\n    $match: { pages: 100 }\n  }\n])\n"})})})]})})]}),"\n",(0,t.jsx)(n.h2,{id:"and",children:"AND"}),"\n",(0,t.jsxs)(n.p,{children:["If we need to add more conditions using AND, we use the ",(0,t.jsx)(n.code,{children:"$and"})," operator."]}),"\n",(0,t.jsxs)(n.p,{children:["If we want all the books with 100 pages and with exactly ",(0,t.jsx)(n.code,{children:"totalInventory"})," 1, we can use the ",(0,t.jsx)(n.code,{children:"$and"})," operator. It takes an array of documents with all the conditions that should be true for the AND to succeed:"]}),"\n",(0,t.jsxs)(l.Z,{groupId:"aggregations",children:[(0,t.jsx)(o.Z,{value:"atlas",label:"Atlas UI",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"[\n  {\n    $match: {\n      $and: [\n        { pages: 100 },\n        { totalInventory: 1 }\n      ]\n    }\n  }\n]\n"})})}),(0,t.jsx)(o.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"db.books.aggregate([\n  {\n    $match: { \n      $and: [\n        { pages: 100 }, \n        { totalInventory: 1 }\n      ]\n    }\n  }\n])\n"})})})]}),"\n",(0,t.jsx)(n.p,{children:"The pseudo-code for this would be something like:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"IF pages == 100 AND totalInventory == 1 {\n    return matching docs\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["\uD83D\uDC50 Return all the ",(0,t.jsx)(n.code,{children:"books"})," from 2015 that have exactly 100 pages."]}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:"Answer"}),(0,t.jsx)("div",{children:(0,t.jsxs)(l.Z,{groupId:"aggregations",children:[(0,t.jsx)(o.Z,{value:"atlas",label:"Atlas UI",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"[\n  {\n    $match: {\n      $and: [\n        { pages: 100 },\n        { year: 2015 }\n      ]\n    }\n  }\n]\n"})})}),(0,t.jsx)(o.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"db.books.aggregate([\n  { \n    $match: {\n      $and: [\n        { pages: 100 }, \n        { year: 2015 }\n      ]\n    } \n  }\n])\n"})})})]})})]}),"\n",(0,t.jsxs)(n.p,{children:["\uD83D\uDC50 How many are there? We haven't yet seen the ",(0,t.jsx)(n.code,{children:"$count"})," stage, but try to add a second stage to your pipeline with ",(0,t.jsx)(n.code,{children:'{ $count: "books_count" }'}),"."]}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:"Answer"}),(0,t.jsx)("div",{children:(0,t.jsxs)(l.Z,{groupId:"aggregations",children:[(0,t.jsx)(o.Z,{value:"atlas",label:"Atlas UI",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'[\n    {\n        $match: {\n            $and: [\n                { pages: 100 },\n                { year: 2015 }\n            ]\n        }\n    },\n    {\n        $count: "books_count"\n    }\n]\n'})})}),(0,t.jsx)(o.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'db.books.aggregate(\n  [\n    { $match: {$and: [{pages: 100}, {year: 2015}]} },\n    { $count: "books_count" }\n  ]\n)\n'})})})]})})]}),"\n",(0,t.jsx)(n.h3,{id:"shorthand-and",children:"Shorthand AND"}),"\n",(0,t.jsx)(n.p,{children:"We can do an implicit AND just passing a document with all the conditions (instead of an array of documents):"}),"\n",(0,t.jsxs)(l.Z,{groupId:"aggregations",children:[(0,t.jsx)(o.Z,{value:"atlas",label:"Atlas UI",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"[\n  {\n    $match: { pages: 100, totalInventory: 2 }\n  }\n]\n"})})}),(0,t.jsx)(o.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"db.books.aggregate([\n  {\n    $match: { pages: 100, totalInventory: 2 }\n  }\n])\n"})})})]}),"\n",(0,t.jsxs)(n.p,{children:["\uD83D\uDC50 Return all the ",(0,t.jsx)(n.code,{children:"books"})," from 2015 that have exactly 100 pages, using the shorthand ",(0,t.jsx)(n.code,{children:"$and"})," notation:"]}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:"Answer"}),(0,t.jsx)("div",{children:(0,t.jsxs)(l.Z,{groupId:"aggregations",children:[(0,t.jsx)(o.Z,{value:"atlas",label:"Atlas UI",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"[\n    {\n        $match: {pages: 100, year: 2015}\n    }\n]\n"})})}),(0,t.jsx)(o.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"db.books.aggregate([{$match: {pages: 100, year: 2015}}])\n"})})})]})})]})]})}function g(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}function p(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},5525:function(e,n,a){a.d(n,{Z:()=>r});var s=a(5893);a(7294);var t=a(4904);function r({children:e,hidden:n,className:a}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,t.Z)("tabItem_Ymn6",a),hidden:n,children:e})}},7902:function(e,n,a){a.d(n,{Z:()=>b});var s=a(5893),t=a(7294),r=a(4904),l=a(9599),o=a(6550),i=a(2e3),c=a(4520),d=a(8341),h=a(6009);function u(e){return t.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function g({value:e,tabValues:n}){return n.some(n=>n.value===e)}var p=a(7227);function m({className:e,block:n,selectedValue:a,selectValue:t,tabValues:o}){let i=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.o5)(),d=e=>{let n=e.currentTarget,s=o[i.indexOf(n)].value;s!==a&&(c(n),t(s))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{let a=i.indexOf(e.currentTarget)+1;n=i[a]??i[0];break}case"ArrowLeft":{let a=i.indexOf(e.currentTarget)-1;n=i[a]??i[i.length-1]}}n?.focus()};return(0,s.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},e),children:o.map(({value:e,label:n,attributes:t})=>(0,s.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:e=>{i.push(e)},onKeyDown:h,onClick:d,...t,className:(0,r.Z)("tabs__item","tabItem_LNqP",t?.className,{"tabs__item--active":a===e}),children:n??e},e))})}function x({lazy:e,children:n,selectedValue:a}){let l=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){let e=l.find(e=>e.props.value===a);return e?(0,t.cloneElement)(e,{className:(0,r.Z)("margin-top--md",e.props.className)}):null}return(0,s.jsx)("div",{className:"margin-top--md",children:l.map((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==a}))})}function j(e){let n=function(e){let{defaultValue:n,queryString:a=!1,groupId:s}=e,r=function(e){let{values:n,children:a}=e;return(0,t.useMemo)(()=>{let e=n??u(a).map(({props:{value:e,label:n,attributes:a,default:s}})=>({value:e,label:n,attributes:a,default:s})),s=(0,d.lx)(e,(e,n)=>e.value===n.value);if(s.length>0)throw Error(`Docusaurus error: Duplicate values "${s.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`);return e},[n,a])}(e),[l,p]=(0,t.useState)(()=>(function({defaultValue:e,tabValues:n}){if(0===n.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!g({value:e,tabValues:n}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}let a=n.find(e=>e.default)??n[0];if(!a)throw Error("Unexpected error: 0 tabValues");return a.value})({defaultValue:n,tabValues:r})),[m,x]=function({queryString:e=!1,groupId:n}){let a=(0,o.k6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,c._X)(s),(0,t.useCallback)(e=>{if(!s)return;let n=new URLSearchParams(a.location.search);n.set(s,e),a.replace({...a.location,search:n.toString()})},[s,a])]}({queryString:a,groupId:s}),[j,b]=function({groupId:e}){let n=e?`docusaurus.tab.${e}`:null,[a,s]=(0,h.Nk)(n);return[a,(0,t.useCallback)(e=>{n&&s.set(e)},[n,s])]}({groupId:s}),f=(()=>{let e=m??j;return g({value:e,tabValues:r})?e:null})();return(0,i.Z)(()=>{f&&p(f)},[f]),{selectedValue:l,selectValue:(0,t.useCallback)(e=>{if(!g({value:e,tabValues:r}))throw Error(`Can't select invalid tab value=${e}`);p(e),x(e),b(e)},[x,b,r]),tabValues:r}}(e);return(0,s.jsxs)("div",{className:(0,r.Z)("tabs-container","tabList__CuJ"),children:[(0,s.jsx)(m,{...n,...e}),(0,s.jsx)(x,{...n,...e})]})}function b(e){let n=(0,p.Z)();return(0,s.jsx)(j,{...e,children:u(e.children)},String(n))}},65:function(e,n,a){a.d(n,{Z:()=>o,a:()=>l});var s=a(7294);let t={},r=s.createContext(t);function l(e){let n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);