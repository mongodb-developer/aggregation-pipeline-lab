"use strict";(self.webpackChunkaggregation_pipeline_workshop=self.webpackChunkaggregation_pipeline_workshop||[]).push([[1727],{8699:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var t=o(4848),a=o(8453),r=o(1470),s=o(9365);const l={},i="\ud83e\uddb8\u200d\u2642\ufe0f Advanced lookups",c={id:"lookups/advanced-lookups",title:"\ud83e\uddb8\u200d\u2642\ufe0f Advanced lookups",description:"Extra activity! Do it if you have extra time or are following along at home. It won't be covered during the hands-on lab.",source:"@site/docs/60-lookups/2-advanced-lookups.mdx",sourceDirName:"60-lookups",slug:"/lookups/advanced-lookups",permalink:"/aggregation-pipeline-lab/docs/lookups/advanced-lookups",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/aggregation-pipeline-lab/blob/main/docs/60-lookups/2-advanced-lookups.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udc50 Lookups, AKA Left Outer Join",permalink:"/aggregation-pipeline-lab/docs/lookups/lookups"},next:{title:"Grouping Results",permalink:"/aggregation-pipeline-lab/docs/category/grouping-results"}},u={},d=[];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"\ufe0f-advanced-lookups",children:"\ud83e\uddb8\u200d\u2642\ufe0f Advanced lookups"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"Extra activity! Do it if you have extra time or are following along at home. It won't be covered during the hands-on lab."})}),"\n",(0,t.jsxs)(n.p,{children:["We get this request: Write a ",(0,t.jsx)(n.code,{children:"$lookup"})," to get ",(0,t.jsx)(n.code,{children:"name"})," and ",(0,t.jsx)(n.code,{children:"bio"})," from author's information inside each book document. To get this done, we need to review several things:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Each book can have several authors. This many-to-many relationship (as an author can also write many books) is modeled using two different arrays: a ",(0,t.jsx)(n.code,{children:"books"})," array in the ",(0,t.jsx)(n.code,{children:"authors"})," collection and an ",(0,t.jsx)(n.code,{children:"authors"})," array in the ",(0,t.jsx)(n.code,{children:"books"})," collection."]}),"\n",(0,t.jsxs)(n.li,{children:["So we'll need to get a separate document for each book that has more than one author. If a book has three authors, we'll use ",(0,t.jsx)(n.code,{children:"$unwind"})," to get three documents with the same data except for the author, which will be each of the three authors."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"You can try this with this aggregation pipeline:"}),"\n",(0,t.jsxs)(r.A,{groupId:"aggregations",children:[(0,t.jsx)(s.A,{value:"atlas",label:"Atlas UI",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'[\n  // as a book can have many authors, we get one doc per book\'s author\n  {$unwind: "$authors"},\n  // remove some noisy fields\n  {$project: {attributes: 0, reviews: 0}}\n]\n'})})}),(0,t.jsx)(s.A,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'db.books.aggregate([\n  // as a book can have many authors, we get one doc per book\'s author\n  {$unwind: "$authors"},\n  // remove some noisy fields\n  {$project: {attributes: 0, reviews: 0}}\n])\n'})})})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Now, we need to get the authors' information. For that, we'll use ",(0,t.jsx)(n.code,{children:"$lookup"}),", linking the ",(0,t.jsx)(n.code,{children:"_id"})," in the ",(0,t.jsx)(n.code,{children:"authors"})," collection with the ",(0,t.jsx)(n.code,{children:"_id"})," we have in each book's ",(0,t.jsx)(n.code,{children:"authors"})," array. But as we can see here, these have a different type: The ones inside our array are strings, while the ",(0,t.jsx)(n.code,{children:"author"})," collection ",(0,t.jsx)(n.code,{children:"_id"})," are ",(0,t.jsx)(n.code,{children:"ObjectId"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"  authors: {\n    _id: '64cc2db4830ba29148da64a2',\n    name: 'Timothy Findley'\n  },\n"})}),"\n",(0,t.jsxs)(n.p,{children:["So we need to convert from ",(0,t.jsx)(n.code,{children:"String"})," into ",(0,t.jsx)(n.code,{children:"ObjectId"}),". We can do that using ",(0,t.jsx)(n.code,{children:"$toObjectId"}),". This will add a new field, ",(0,t.jsx)(n.code,{children:"authorId"}),", converting it into ",(0,t.jsx)(n.code,{children:"ObjectId"}),":"]}),"\n",(0,t.jsxs)(r.A,{groupId:"aggregations",children:[(0,t.jsx)(s.A,{value:"atlas",label:"Atlas UI",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'[\n  // as a book can have many authors, we get one doc per book\'s author\n  {$unwind: "$authors"},\n  // convert it to an objectId\n  {"$set":{"authorId":{"$toObjectId":"$authors._id"}}},\n  // remove some noisy fields\n  {$project: {attributes: 0, reviews: 0}}\n]\n'})})}),(0,t.jsx)(s.A,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'db.books.aggregate([\n  // as a book can have many authors, we get one doc per book\'s author\n  {$unwind: "$authors"},\n  // convert it to an objectId\n  {"$set":{"authorId":{"$toObjectId":"$authors._id"}}},\n  // remove some noisy fields\n  {$project: {attributes: 0, reviews: 0}}\n])\n'})})})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Now, we're ready to do the ",(0,t.jsx)(n.code,{children:"$lookup"}),": We want all documents from ",(0,t.jsx)(n.code,{children:"authors"})," that have the same ",(0,t.jsx)(n.code,{children:"_id"})," as the ",(0,t.jsx)(n.code,{children:"authorId"})," we just created. We use a ",(0,t.jsx)(n.code,{children:"pipeline"})," to get just ",(0,t.jsx)(n.code,{children:"authors"})," ",(0,t.jsx)(n.code,{children:"name"})," and ",(0,t.jsx)(n.code,{children:"bio"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(r.A,{groupId:"aggregations",children:[(0,t.jsx)(s.A,{value:"atlas",label:"Atlas UI",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'[\n  // as a book can have many authors, we get one doc per book\'s author\n  {$unwind: "$authors"},\n  // convert it to an objectId\n  {"$set":{"authorId":{"$toObjectId":"$authors._id"}}},\n  {$lookup: {\n      from: "authors",\n      localField: "authorId",\n      foreignField: "_id",\n      pipeline: [\n          {$project: {name: 1, bio: 1}},\n      ],\n      as: "bookAuthorDetails"\n    } \n  },\n  // remove some noisy fields\n  {$project: {attributes: 0, reviews: 0}}\n]\n'})})}),(0,t.jsx)(s.A,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'db.books.aggregate([\n  // as a book can have many authors, we get one doc per book\'s author\n  {$unwind: "$authors"},\n  // convert it to an objectId\n  {"$set":{"authorId":{"$toObjectId":"$authors._id"}}},\n  {$lookup: {\n      from: "authors",\n      localField: "authorId",\n      foreignField: "_id",\n      pipeline: [\n          {$project: {name: 1, bio: 1}},\n      ],\n      as: "bookAuthorDetails"\n    } \n  },\n  // remove some noisy fields\n  {$project: {attributes: 0, reviews: 0}}\n])\n'})})})]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},9365:(e,n,o)=>{o.d(n,{A:()=>s});o(6540);var t=o(8215);const a={tabItem:"tabItem_Ymn6"};var r=o(4848);function s(e){let{children:n,hidden:o,className:s}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,t.A)(a.tabItem,s),hidden:o,children:n})}},1470:(e,n,o)=>{o.d(n,{A:()=>k});var t=o(6540),a=o(8215),r=o(3104),s=o(6347),l=o(205),i=o(7485),c=o(1682),u=o(679);function d(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:o}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:o,attributes:t,default:a}}=e;return{value:n,label:o,attributes:t,default:a}}))}(o);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,o])}function p(e){let{value:n,tabValues:o}=e;return o.some((e=>e.value===n))}function b(e){let{queryString:n=!1,groupId:o}=e;const a=(0,s.W6)(),r=function(e){let{queryString:n=!1,groupId:o}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!o)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return o??null}({queryString:n,groupId:o});return[(0,i.aZ)(r),(0,t.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})}),[r,a])]}function g(e){const{defaultValue:n,queryString:o=!1,groupId:a}=e,r=h(e),[s,i]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:o}=e;if(0===o.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:o}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${o.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=o.find((e=>e.default))??o[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:r}))),[c,d]=b({queryString:o,groupId:a}),[g,m]=function(e){let{groupId:n}=e;const o=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,r]=(0,u.Dv)(o);return[a,(0,t.useCallback)((e=>{o&&r.set(e)}),[o,r])]}({groupId:a}),j=(()=>{const e=c??g;return p({value:e,tabValues:r})?e:null})();(0,l.A)((()=>{j&&i(j)}),[j]);return{selectedValue:s,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);i(e),d(e),m(e)}),[d,m,r]),tabValues:r}}var m=o(2303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=o(4848);function v(e){let{className:n,block:o,selectedValue:t,selectValue:s,tabValues:l}=e;const i=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),u=e=>{const n=e.currentTarget,o=i.indexOf(n),a=l[o].value;a!==t&&(c(n),s(a))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const o=i.indexOf(e.currentTarget)+1;n=i[o]??i[0];break}case"ArrowLeft":{const o=i.indexOf(e.currentTarget)-1;n=i[o]??i[i.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":o},n),children:l.map((e=>{let{value:n,label:o,attributes:r}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>i.push(e),onKeyDown:d,onClick:u,...r,className:(0,a.A)("tabs__item",j.tabItem,r?.className,{"tabs__item--active":t===n}),children:o??n},n)}))})}function x(e){let{lazy:n,children:o,selectedValue:r}=e;const s=(Array.isArray(o)?o:[o]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===r));return e?(0,t.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function w(e){const n=g(e);return(0,f.jsxs)("div",{className:(0,a.A)("tabs-container",j.tabList),children:[(0,f.jsx)(v,{...n,...e}),(0,f.jsx)(x,{...n,...e})]})}function k(e){const n=(0,m.A)();return(0,f.jsx)(w,{...e,children:d(e.children)},String(n))}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>l});var t=o(6540);const a={},r=t.createContext(a);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);