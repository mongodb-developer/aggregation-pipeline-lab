"use strict";(self.webpackChunkaggregation_pipeline_workshop=self.webpackChunkaggregation_pipeline_workshop||[]).push([["1330"],{4929:function(e,n,t){t.r(n),t.d(n,{default:()=>c,frontMatter:()=>r,metadata:()=>a,assets:()=>g,toc:()=>d,contentTitle:()=>o});var a=JSON.parse('{"id":"what-is-aggregation/sql-vs-aggregation","title":"\uD83D\uDCD8 SQL vs Aggregations","description":"Let\'s compare SQL with an aggregation pipeline.","source":"@site/docs/20-what-is-aggregation/2-sql-vs-aggregation.mdx","sourceDirName":"20-what-is-aggregation","slug":"/what-is-aggregation/sql-vs-aggregation","permalink":"/aggregation-pipeline-lab/docs/what-is-aggregation/sql-vs-aggregation","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/aggregation-pipeline-lab/blob/main/docs/20-what-is-aggregation/2-sql-vs-aggregation.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"description":"Let\'s compare SQL with an aggregation pipeline."},"sidebar":"tutorialSidebar","previous":{"title":"\uD83D\uDCD8 What is an Aggregation Pipeline?","permalink":"/aggregation-pipeline-lab/docs/what-is-aggregation/what-is-aggregation"},"next":{"title":"\uD83D\uDCD8 Structure of an Aggregation Pipeline","permalink":"/aggregation-pipeline-lab/docs/what-is-aggregation/structure-aggregation"}}'),i=t("5893"),s=t("65");let r={description:"Let's compare SQL with an aggregation pipeline."},o="\uD83D\uDCD8 SQL vs Aggregations",g={},d=[{value:"SQL",id:"sql",level:2},{value:"Equivalent MongoDB aggregation pipeline",id:"equivalent-mongodb-aggregation-pipeline",level:2}];function l(e){let n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"-sql-vs-aggregations",children:"\uD83D\uDCD8 SQL vs Aggregations"})}),"\n",(0,i.jsx)(n.h2,{id:"sql",children:"SQL"}),"\n",(0,i.jsxs)(n.p,{children:["A SQL query statement usually starts with a ",(0,i.jsx)(n.code,{children:"SELECT"})," where we put a list of the fields we need, then a ",(0,i.jsx)(n.code,{children:"FROM"})," clause to state the table/s (or in this case, the subquery) that will return the rows. We can filter out using ",(0,i.jsx)(n.code,{children:"WHERE"})," and group data using ",(0,i.jsx)(n.code,{children:"GROUP"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"We read this from the inside. If there's too much nesting, it's not easy to follow."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'SELECT\n    city,\n    SUM(annual_spend) Total_Spend,\n    AVG(annual_spend) Average_Spend,\n    MAX(annual_spend) Max_Spend,\n    COUNT(annual_spend) customers\nFROM (\n    SELECT t1.city, customer.annual_spend\n    FROM customer \n    LEFT JOIN (\n        SELECT address.address_id, city.city,\n               address.customer_id, address.location\n        FROM address LEFT JOIN city\n        ON address.city_id = city.city_id\n        ) AS t1\n    ON\n    (customer.customer_id = t1.customer_id AND\n              t1.location = "home")\n) AS t2\nGROUP BY city;\n'})}),"\n",(0,i.jsx)(n.h2,{id:"equivalent-mongodb-aggregation-pipeline",children:"Equivalent MongoDB aggregation pipeline"}),"\n",(0,i.jsxs)(n.p,{children:["Here we pass three stages: one to return one document per element in the ",(0,i.jsx)(n.code,{children:"address"})," array, and then we filter out to get only the documents that have a ",(0,i.jsx)(n.code,{children:"home"})," address location. Finally, we do the grouping. As we'll see, this can be split and tested separately and resembles our code."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'db.customers.aggregate([\n	{\n		$unwind: "$address",\n	},\n	{\n		$match: {"address.location": "home"}\n	},\n	{\n		 $group: {\n			_id: "$address.city",\n			totalSpend: {$sum: "$annualSpend"},\n			averageSpend: {$avg: "$annualSpend"},\n			maximumSpend: {$max: "$annualSpend"},\n			customers: {$sum: 1}\n		}\n	}\n])\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["See also ",(0,i.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/sql-aggregation-comparison/",children:"SQL to Aggregation Mapping Chart"})]})})]})}function c(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},65:function(e,n,t){t.d(n,{Z:function(){return o},a:function(){return r}});var a=t(7294);let i={},s=a.createContext(i);function r(e){let n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);