"use strict";(self.webpackChunkaggregation_pipeline_workshop=self.webpackChunkaggregation_pipeline_workshop||[]).push([[727],{6592:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var t=n(4848),a=n(8453);const s={},r="\ud83e\uddb8\u200d\u2642\ufe0f Advanced lookups",i={id:"lookups/advanced-lookups",title:"\ud83e\uddb8\u200d\u2642\ufe0f Advanced lookups",description:"Extra activity! Do it if you have extra time or are following along at home. It won't be covered during the hands-on lab.",source:"@site/docs/60-lookups/2-advanced-lookups.mdx",sourceDirName:"60-lookups",slug:"/lookups/advanced-lookups",permalink:"/aggregation-pipeline-lab/docs/lookups/advanced-lookups",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/aggregation-pipeline-lab/blob/main/docs/60-lookups/2-advanced-lookups.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udc50 Lookups, AKA Left Outer Join",permalink:"/aggregation-pipeline-lab/docs/lookups/lookups"},next:{title:"Grouping Results",permalink:"/aggregation-pipeline-lab/docs/category/grouping-results"}},d={},c=[];function l(e){const o={admonition:"admonition",code:"code",h1:"h1",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.h1,{id:"\ufe0f-advanced-lookups",children:"\ud83e\uddb8\u200d\u2642\ufe0f Advanced lookups"}),"\n",(0,t.jsx)(o.admonition,{type:"info",children:(0,t.jsx)(o.p,{children:"Extra activity! Do it if you have extra time or are following along at home. It won't be covered during the hands-on lab."})}),"\n",(0,t.jsxs)(o.p,{children:["We get this request: Write a ",(0,t.jsx)(o.code,{children:"$lookup"})," to get ",(0,t.jsx)(o.code,{children:"name"})," and ",(0,t.jsx)(o.code,{children:"bio"})," from author's information inside each book document. To get this done, we need to review several things:"]}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsxs)(o.li,{children:["Each book can have several authors. This many-to-many relationship (as an author can also write many books) is modeled using two different arrays: a ",(0,t.jsx)(o.code,{children:"books"})," array in the ",(0,t.jsx)(o.code,{children:"authors"})," collection and an ",(0,t.jsx)(o.code,{children:"authors"})," array in the ",(0,t.jsx)(o.code,{children:"books"})," collection."]}),"\n",(0,t.jsxs)(o.li,{children:["So we'll need to get a separate document for each book that has more than one author. If a book has three authors, we'll use ",(0,t.jsx)(o.code,{children:"$unwind"})," to get three documents with the same data except for the author, which will be each of the three authors."]}),"\n"]}),"\n",(0,t.jsx)(o.p,{children:"You can try this with this aggregation pipeline:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-js",children:'db.books.aggregate([\n    // as a book can have many authors, we get one doc per book\'s author\n    {$unwind: "$authors"},\n    // remove some noisy fields\n    {$project: {attributes: 0, reviews: 0}}\n])\n'})}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsxs)(o.li,{children:["Now, we need to get the authors' information. For that, we'll use ",(0,t.jsx)(o.code,{children:"$lookup"}),", linking the ",(0,t.jsx)(o.code,{children:"_id"})," in the ",(0,t.jsx)(o.code,{children:"authors"})," collection with the ",(0,t.jsx)(o.code,{children:"_id"})," we have in each book's ",(0,t.jsx)(o.code,{children:"authors"})," array. But as we can see here, these have a different type: The ones inside our array are strings, while the ",(0,t.jsx)(o.code,{children:"author"})," collection ",(0,t.jsx)(o.code,{children:"_id"})," are ",(0,t.jsx)(o.code,{children:"ObjectId"}),"."]}),"\n"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-js",children:"  authors: {\n    _id: '64cc2db4830ba29148da64a2',\n    name: 'Timothy Findley'\n  },\n"})}),"\n",(0,t.jsxs)(o.p,{children:["So we need to convert from ",(0,t.jsx)(o.code,{children:"String"})," into ",(0,t.jsx)(o.code,{children:"ObjectId"}),". We can do that using ",(0,t.jsx)(o.code,{children:"$toObjectId"}),". This will add a new field, ",(0,t.jsx)(o.code,{children:"authorId"}),", converting it into ",(0,t.jsx)(o.code,{children:"ObjectId"}),":"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-js",children:'db.books.aggregate([\n    // as a book can have many authors, we get one doc per book\'s author\n    {$unwind: "$authors"},\n    // convert it to an objectId\n    {"$set":{"authorId":{"$toObjectId":"$authors._id"}}},\n    // remove some noisy fields\n    {$project: {attributes: 0, reviews: 0}}\n])\n'})}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsxs)(o.li,{children:["Now, we're ready to do the ",(0,t.jsx)(o.code,{children:"$lookup"}),": We want all documents from ",(0,t.jsx)(o.code,{children:"authors"})," that have the same ",(0,t.jsx)(o.code,{children:"_id"})," as the ",(0,t.jsx)(o.code,{children:"authorId"})," we just created. We use a ",(0,t.jsx)(o.code,{children:"pipeline"})," to get just ",(0,t.jsx)(o.code,{children:"authors"})," ",(0,t.jsx)(o.code,{children:"name"})," and ",(0,t.jsx)(o.code,{children:"bio"}),"."]}),"\n"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-js",children:'db.books.aggregate([\n    // as a book can have many authors, we get one doc per book\'s author\n    {$unwind: "$authors"},\n    // convert it to an objectId\n    {"$set":{"authorId":{"$toObjectId":"$authors._id"}}},\n    {$lookup: {\n       from: "authors",\n       localField: "authorId",\n       foreignField: "_id",\n       pipeline: [\n            {$project: {name: 1, bio: 1}},\n       ],\n       as: "bookAuthorDetails"\n     } \n    },\n    // remove some noisy fields\n    {$project: {attributes: 0, reviews: 0}}\n])\n'})})]})}function h(e={}){const{wrapper:o}={...(0,a.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>r,x:()=>i});var t=n(6540);const a={},s=t.createContext(a);function r(e){const o=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(s.Provider,{value:o},e.children)}}}]);