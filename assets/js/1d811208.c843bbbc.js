"use strict";(self.webpackChunkaggregation_pipeline_workshop=self.webpackChunkaggregation_pipeline_workshop||[]).push([[116],{8005:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var t=o(4848),s=o(8453);const r={},i="\ud83d\udc50 Sorting",a={id:"counting-sorting/sorting",title:"\ud83d\udc50 Sorting",description:"We can sort our results using the $sort stage. We need to sort on a field, being 1 ascending and -1 descending order.",source:"@site/docs/50-counting-sorting/10-sorting.mdx",sourceDirName:"50-counting-sorting",slug:"/counting-sorting/sorting",permalink:"/aggregation-pipeline-lab/docs/counting-sorting/sorting",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/aggregation-pipeline-lab/blob/main/docs/50-counting-sorting/10-sorting.mdx",tags:[],version:"current",sidebarPosition:10,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udc50 $count",permalink:"/aggregation-pipeline-lab/docs/counting-sorting/counting-documents"},next:{title:"Lookups / Joins",permalink:"/aggregation-pipeline-lab/docs/category/lookups--joins"}},c={},l=[];function d(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.R)(),...e.components},{Details:o}=n;return o||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"-sorting",children:"\ud83d\udc50 Sorting"}),"\n",(0,t.jsxs)(n.p,{children:["We can sort our results using the ",(0,t.jsx)(n.code,{children:"$sort"})," stage. We need to sort on a field, being 1 ascending and -1 descending order."]}),"\n",(0,t.jsx)(n.p,{children:"\ud83d\udc50 Let's get all books from 1984, sorted by number of pages. We'll only show the title, pages, and authors."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'let booksFrom1984 = {$match: {year: 1984}};\nlet showOnlyTheseFields = {$project: {_id: 0, title: 1, pages: 1, authors: 1}};\nlet slimmerBooksFirst = {$sort: {"pages": 1}}\n\ndb.books.aggregate([\n    booksFrom1984,\n    showOnlyTheseFields,\n    slimmerBooksFirst,\n]);\n'})}),"\n",(0,t.jsxs)(n.p,{children:["As we can see, books with no ",(0,t.jsx)(n.code,{children:"pages"})," info appear first. These documents don't have that information. Hence, ",(0,t.jsx)(n.code,{children:"pages"})," is ",(0,t.jsx)(n.code,{children:"null"})," and gets sorted as less than any number."]}),"\n",(0,t.jsx)(n.p,{children:"\ud83d\udc50 We can sort the other way around:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'let booksFrom1984 = {$match: {year: 1984}};\nlet showOnlyTheseFields = {$project: {_id: 0, title: 1, pages: 1, authors: 1}};\nlet thickerBooksFirst = {$sort: {"pages": -1}}\n\ndb.books.aggregate([\n    booksFrom1984,\n    showOnlyTheseFields,\n    thickerBooksFirst,\n]);\n'})}),"\n",(0,t.jsx)(n.p,{children:"\ud83d\udc50 How can we get the thickest book from 1984?"}),"\n",(0,t.jsxs)(o,{children:[(0,t.jsx)("summary",{children:"Answer"}),(0,t.jsx)("div",{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'let booksFrom1984 = {$match: {year: 1984}};\nlet showOnlyTheseFields = {$project: {_id: 0, title: 1, pages: 1, authors: 1}};\nlet thickerBooksFirst = {$sort: {"pages": -1}}\nlet justOne = {$limit: 1}\n\ndb.books.aggregate([\n    booksFrom1984,\n    showOnlyTheseFields,\n    thickerBooksFirst,\n    justOne\n]);\n'})})})]})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>a});var t=o(6540);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);