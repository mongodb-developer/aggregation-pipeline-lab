"use strict";(self.webpackChunkaggregation_pipeline_workshop=self.webpackChunkaggregation_pipeline_workshop||[]).push([[7318],{6360:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var o=t(4848),s=t(8453);const r={},i="\ud83d\udc50 $count",a={id:"counting-sorting/counting-documents",title:"\ud83d\udc50 $count",description:"How can we be sure that this pipeline is returning exactly 15 books?",source:"@site/docs/50-counting-sorting/1-counting-documents.mdx",sourceDirName:"50-counting-sorting",slug:"/counting-sorting/counting-documents",permalink:"/aggregation-pipeline-lab/docs/counting-sorting/counting-documents",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/aggregation-pipeline-lab/blob/main/docs/50-counting-sorting/1-counting-documents.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Counting and Sorting",permalink:"/aggregation-pipeline-lab/docs/category/counting-and-sorting"},next:{title:"\ud83d\udc50 Sorting",permalink:"/aggregation-pipeline-lab/docs/counting-sorting/sorting"}},c={},l=[{value:"The order of stages is important",id:"the-order-of-stages-is-important",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"-count",children:"\ud83d\udc50 $count"})}),"\n",(0,o.jsx)(n.p,{children:"How can we be sure that this pipeline is returning exactly 15 books?"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"let moreThan150pages =  {pages: {$gte: 150}}\nlet booksFrom1985WithMoreThan150pages = {$match: {$and: [{year: 1985}, moreThan150pages]}};\nlet showOnlyTheseFields = {$project: {_id: 0, title: 1, year: 1, totalInventory: 1, available: 1}};\nlet getJust15books =  {$limit: 15};\n\ndb.books.aggregate([\n    booksFrom1985WithMoreThan150pages,\n    showOnlyTheseFields,\n    getJust15books,\n]);\n"})}),"\n",(0,o.jsx)(n.p,{children:"By counting the books! Let's add a new stage to the pipeline to count those books:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'let moreThan150pages =  {pages: {$gte: 150}}\nlet booksFrom1985WithMoreThan150pages = {$match: {$and: [{year: 1985}, moreThan150pages]}};\nlet showOnlyTheseFields = {$project: {_id: 0, title: 1, year: 1, totalInventory: 1, available: 1}};\nlet getJust15books =  {$limit: 15};\nlet count = {$count: "totalBooks"}\n\ndb.books.aggregate([\n    booksFrom1985WithMoreThan150pages,\n    showOnlyTheseFields,\n    getJust15books,\n    count,\n]);\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Here, ",(0,o.jsx)(n.code,{children:"$count"})," will count the resulting docs and will return a document with just one field: ",(0,o.jsx)(n.code,{children:"totalBooks"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"{\n  totalBooks: 15\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["\ud83d\udc50 How many authors do we have in our ",(0,o.jsx)(n.code,{children:"authors"})," collection?"]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Answer"}),(0,o.jsx)("div",{children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'db.authors.aggregate([{$count: "authorCount"}])\n'})})})]}),"\n",(0,o.jsx)(n.h2,{id:"the-order-of-stages-is-important",children:"The order of stages is important"}),"\n",(0,o.jsxs)(n.p,{children:["If we count after the ",(0,o.jsx)(n.code,{children:"$match"})," stage, the document we're passing to the next steps contains only the ",(0,o.jsx)(n.code,{children:"totalBooks"})," field. So the ",(0,o.jsx)(n.code,{children:"$project"})," stage will return an empty document."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'let moreThan150pages =  {pages: {$gte: 150}}\nlet booksFrom1985WithMoreThan150pages = {$match: {$and: [{year: 1985}, moreThan150pages]}};\nlet showOnlyTheseFields = {$project: {_id: 0, title: 1, year: 1, totalInventory: 1, available: 1}};\nlet getJust15books =  {$limit: 15};\nlet count = {$count: "totalBooks"}\n\ndb.books.aggregate([\n    booksFrom1985WithMoreThan150pages,\n    count,\n    showOnlyTheseFields,\n    getJust15books,\n]);\n'})})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(6540);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);