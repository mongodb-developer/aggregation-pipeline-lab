"use strict";(self.webpackChunkaggregation_pipeline_workshop=self.webpackChunkaggregation_pipeline_workshop||[]).push([["695"],{2382:function(e,n,o){o.r(n),o.d(n,{frontMatter:()=>l,default:()=>p,toc:()=>u,metadata:()=>t,assets:()=>d,contentTitle:()=>c});var t=JSON.parse('{"id":"lookups/advanced-lookups","title":"\uD83E\uDDB8\u200D\u2642\uFE0F Advanced Lookups","description":"Extra activity! Do it if you have extra time or are following along at home. It won\'t be covered during the hands-on lab.","source":"@site/docs/60-lookups/2-advanced-lookups.mdx","sourceDirName":"60-lookups","slug":"/lookups/advanced-lookups","permalink":"/aggregation-pipeline-lab/docs/lookups/advanced-lookups","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/aggregation-pipeline-lab/blob/main/docs/60-lookups/2-advanced-lookups.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\uD83D\uDC50 Lookups, AKA Left Outer Join","permalink":"/aggregation-pipeline-lab/docs/lookups/lookups"},"next":{"title":"Grouping Results","permalink":"/aggregation-pipeline-lab/docs/category/grouping-results"}}'),a=o(5893),r=o(65),s=o(7902),i=o(5525);let l={},c="\uD83E\uDDB8\u200D\u2642\uFE0F Advanced Lookups",d={},u=[];function h(e){let n={admonition:"admonition",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"\uFE0F-advanced-lookups",children:"\uD83E\uDDB8\u200D\u2642\uFE0F Advanced Lookups"})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsx)(n.p,{children:"Extra activity! Do it if you have extra time or are following along at home. It won't be covered during the hands-on lab."})}),"\n",(0,a.jsxs)(n.p,{children:["We get this request: Write a ",(0,a.jsx)(n.code,{children:"$lookup"})," to get ",(0,a.jsx)(n.code,{children:"name"})," and ",(0,a.jsx)(n.code,{children:"bio"})," from author's information inside each book document. To get this done, we need to review several things:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Each book can have several authors. This many-to-many relationship (as an author can also write many books) is modeled using two different arrays: a ",(0,a.jsx)(n.code,{children:"books"})," array in the ",(0,a.jsx)(n.code,{children:"authors"})," collection and an ",(0,a.jsx)(n.code,{children:"authors"})," array in the ",(0,a.jsx)(n.code,{children:"books"})," collection."]}),"\n",(0,a.jsxs)(n.li,{children:["So we'll need to get a separate document for each book that has more than one author. If a book has three authors, we'll use ",(0,a.jsx)(n.code,{children:"$unwind"})," to get three documents with the same data except for the author, which will be each of the three authors."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"You can try this with this aggregation pipeline:"}),"\n",(0,a.jsxs)(s.Z,{groupId:"aggregations",children:[(0,a.jsx)(i.Z,{value:"atlas",label:"Atlas UI",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'[\n  // as a book can have many authors, we get one doc per book\'s author\n  {$unwind: "$authors"},\n  // remove some noisy fields\n  {$project: {attributes: 0, reviews: 0}}\n]\n'})})}),(0,a.jsx)(i.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'db.books.aggregate([\n  // as a book can have many authors, we get one doc per book\'s author\n  {$unwind: "$authors"},\n  // remove some noisy fields\n  {$project: {attributes: 0, reviews: 0}}\n])\n'})})})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Now, we need to get the authors' information. For that, we'll use ",(0,a.jsx)(n.code,{children:"$lookup"}),", linking the ",(0,a.jsx)(n.code,{children:"_id"})," in the ",(0,a.jsx)(n.code,{children:"authors"})," collection with the ",(0,a.jsx)(n.code,{children:"_id"})," we have in each book's ",(0,a.jsx)(n.code,{children:"authors"})," array. But as we can see here, these have a different type: The ones inside our array are strings, while the ",(0,a.jsx)(n.code,{children:"author"})," collection ",(0,a.jsx)(n.code,{children:"_id"})," are ",(0,a.jsx)(n.code,{children:"ObjectId"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"  authors: {\n    _id: '64cc2db4830ba29148da64a2',\n    name: 'Timothy Findley'\n  },\n"})}),"\n",(0,a.jsxs)(n.p,{children:["So we need to convert from ",(0,a.jsx)(n.code,{children:"String"})," into ",(0,a.jsx)(n.code,{children:"ObjectId"}),". We can do that using ",(0,a.jsx)(n.code,{children:"$toObjectId"}),". This will add a new field, ",(0,a.jsx)(n.code,{children:"authorId"}),", converting it into ",(0,a.jsx)(n.code,{children:"ObjectId"}),":"]}),"\n",(0,a.jsxs)(s.Z,{groupId:"aggregations",children:[(0,a.jsx)(i.Z,{value:"atlas",label:"Atlas UI",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'[\n  // as a book can have many authors, we get one doc per book\'s author\n  {$unwind: "$authors"},\n  // convert it to an objectId\n  {"$set":{"authorId":{"$toObjectId":"$authors._id"}}},\n  // remove some noisy fields\n  {$project: {attributes: 0, reviews: 0}}\n]\n'})})}),(0,a.jsx)(i.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'db.books.aggregate([\n  // as a book can have many authors, we get one doc per book\'s author\n  {$unwind: "$authors"},\n  // convert it to an objectId\n  {"$set":{"authorId":{"$toObjectId":"$authors._id"}}},\n  // remove some noisy fields\n  {$project: {attributes: 0, reviews: 0}}\n])\n'})})})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Now, we're ready to do the ",(0,a.jsx)(n.code,{children:"$lookup"}),": We want all documents from ",(0,a.jsx)(n.code,{children:"authors"})," that have the same ",(0,a.jsx)(n.code,{children:"_id"})," as the ",(0,a.jsx)(n.code,{children:"authorId"})," we just created. We use a ",(0,a.jsx)(n.code,{children:"pipeline"})," to get just ",(0,a.jsx)(n.code,{children:"authors"})," ",(0,a.jsx)(n.code,{children:"name"})," and ",(0,a.jsx)(n.code,{children:"bio"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(s.Z,{groupId:"aggregations",children:[(0,a.jsx)(i.Z,{value:"atlas",label:"Atlas UI",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'[\n  // as a book can have many authors, we get one doc per book\'s author\n  {$unwind: "$authors"},\n  // convert it to an objectId\n  {"$set":{"authorId":{"$toObjectId":"$authors._id"}}},\n  {$lookup: {\n      from: "authors",\n      localField: "authorId",\n      foreignField: "_id",\n      pipeline: [\n          {$project: {name: 1, bio: 1}},\n      ],\n      as: "bookAuthorDetails"\n    } \n  },\n  // remove some noisy fields\n  {$project: {attributes: 0, reviews: 0}}\n]\n'})})}),(0,a.jsx)(i.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'db.books.aggregate([\n  // as a book can have many authors, we get one doc per book\'s author\n  {$unwind: "$authors"},\n  // convert it to an objectId\n  {"$set":{"authorId":{"$toObjectId":"$authors._id"}}},\n  {$lookup: {\n      from: "authors",\n      localField: "authorId",\n      foreignField: "_id",\n      pipeline: [\n          {$project: {name: 1, bio: 1}},\n      ],\n      as: "bookAuthorDetails"\n    } \n  },\n  // remove some noisy fields\n  {$project: {attributes: 0, reviews: 0}}\n])\n'})})})]})]})}function p(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},5525:function(e,n,o){o.d(n,{Z:()=>r});var t=o(5893);o(7294);var a=o(4904);function r({children:e,hidden:n,className:o}){return(0,t.jsx)("div",{role:"tabpanel",className:(0,a.Z)("tabItem_Ymn6",o),hidden:n,children:e})}},7902:function(e,n,o){o.d(n,{Z:()=>f});var t=o(5893),a=o(7294),r=o(4904),s=o(9599),i=o(6550),l=o(2e3),c=o(4520),d=o(8341),u=o(6009);function h(e){return a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p({value:e,tabValues:n}){return n.some(n=>n.value===e)}var m=o(7227);function b({className:e,block:n,selectedValue:o,selectValue:a,tabValues:i}){let l=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.o5)(),d=e=>{let n=e.currentTarget,t=i[l.indexOf(n)].value;t!==o&&(c(n),a(t))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{let o=l.indexOf(e.currentTarget)+1;n=l[o]??l[0];break}case"ArrowLeft":{let o=l.indexOf(e.currentTarget)-1;n=l[o]??l[l.length-1]}}n?.focus()};return(0,t.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},e),children:i.map(({value:e,label:n,attributes:a})=>(0,t.jsx)("li",{role:"tab",tabIndex:o===e?0:-1,"aria-selected":o===e,ref:e=>{l.push(e)},onKeyDown:u,onClick:d,...a,className:(0,r.Z)("tabs__item","tabItem_LNqP",a?.className,{"tabs__item--active":o===e}),children:n??e},e))})}function g({lazy:e,children:n,selectedValue:o}){let s=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){let e=s.find(e=>e.props.value===o);return e?(0,a.cloneElement)(e,{className:(0,r.Z)("margin-top--md",e.props.className)}):null}return(0,t.jsx)("div",{className:"margin-top--md",children:s.map((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==o}))})}function j(e){let n=function(e){let{defaultValue:n,queryString:o=!1,groupId:t}=e,r=function(e){let{values:n,children:o}=e;return(0,a.useMemo)(()=>{let e=n??h(o).map(({props:{value:e,label:n,attributes:o,default:t}})=>({value:e,label:n,attributes:o,default:t})),t=(0,d.lx)(e,(e,n)=>e.value===n.value);if(t.length>0)throw Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`);return e},[n,o])}(e),[s,m]=(0,a.useState)(()=>(function({defaultValue:e,tabValues:n}){if(0===n.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}let o=n.find(e=>e.default)??n[0];if(!o)throw Error("Unexpected error: 0 tabValues");return o.value})({defaultValue:n,tabValues:r})),[b,g]=function({queryString:e=!1,groupId:n}){let o=(0,i.k6)(),t=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,c._X)(t),(0,a.useCallback)(e=>{if(!t)return;let n=new URLSearchParams(o.location.search);n.set(t,e),o.replace({...o.location,search:n.toString()})},[t,o])]}({queryString:o,groupId:t}),[j,f]=function({groupId:e}){let n=e?`docusaurus.tab.${e}`:null,[o,t]=(0,u.Nk)(n);return[o,(0,a.useCallback)(e=>{n&&t.set(e)},[n,t])]}({groupId:t}),x=(()=>{let e=b??j;return p({value:e,tabValues:r})?e:null})();return(0,l.Z)(()=>{x&&m(x)},[x]),{selectedValue:s,selectValue:(0,a.useCallback)(e=>{if(!p({value:e,tabValues:r}))throw Error(`Can't select invalid tab value=${e}`);m(e),g(e),f(e)},[g,f,r]),tabValues:r}}(e);return(0,t.jsxs)("div",{className:(0,r.Z)("tabs-container","tabList__CuJ"),children:[(0,t.jsx)(b,{...n,...e}),(0,t.jsx)(g,{...n,...e})]})}function f(e){let n=(0,m.Z)();return(0,t.jsx)(j,{...e,children:h(e.children)},String(n))}},65:function(e,n,o){o.d(n,{Z:()=>i,a:()=>s});var t=o(7294);let a={},r=t.createContext(a);function s(e){let n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);