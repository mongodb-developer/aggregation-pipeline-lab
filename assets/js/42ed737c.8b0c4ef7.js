"use strict";(self.webpackChunkaggregation_pipeline_workshop=self.webpackChunkaggregation_pipeline_workshop||[]).push([["7044"],{6162:function(e,n,t){t.r(n),t.d(n,{default:()=>g,frontMatter:()=>s,metadata:()=>o,assets:()=>d,toc:()=>u,contentTitle:()=>c});var o=JSON.parse('{"id":"exporting-data/saving-to-collection","title":"\uD83E\uDDB8 Saving to a Collection","description":"You can export the result of an aggregation pipeline to a different DB/collection. To do that, just add a last aggregation stage $out to your pipeline:","source":"@site/docs/90-exporting-data/saving-to-collection.mdx","sourceDirName":"90-exporting-data","slug":"/exporting-data/saving-to-collection","permalink":"/aggregation-pipeline-lab/docs/exporting-data/saving-to-collection","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/aggregation-pipeline-lab/blob/main/docs/90-exporting-data/saving-to-collection.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Exporting Data","permalink":"/aggregation-pipeline-lab/docs/category/exporting-data"},"next":{"title":"\uD83D\uDCD8 Lecture Material","permalink":"/aggregation-pipeline-lab/docs/lecture-material"}}'),a=t("5893"),r=t("65"),i=t("8168"),l=t("7645");let s={},c="\uD83E\uDDB8 Saving to a Collection",d={},u=[{value:"Merging output results",id:"merging-output-results",level:2}];function h(e){let n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components},{Details:t}=n;return t||function(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"-saving-to-a-collection",children:"\uD83E\uDDB8 Saving to a Collection"})}),"\n",(0,a.jsx)(n.h1,{id:"out",children:"$out"}),"\n",(0,a.jsxs)(n.p,{children:["You can export the result of an aggregation pipeline to a different DB/collection. To do that, just add a last aggregation stage ",(0,a.jsx)(n.code,{children:"$out"})," to your pipeline:"]}),"\n",(0,a.jsxs)(i.Z,{groupId:"aggregations",children:[(0,a.jsxs)(l.Z,{value:"atlas",label:"Atlas UI",children:[(0,a.jsx)(n.p,{children:"Run this from the source collection:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'[{ $out: { db: "<output-db>", coll: "<output-collection>" } }]\n'})})]}),(0,a.jsx)(l.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'db.sourceCollection.aggregate[{ $out: { db: "<output-db>", coll: "<output-collection>" } }]\n'})})})]}),"\n",(0,a.jsxs)(n.p,{children:["You can omit the ",(0,a.jsx)(n.code,{children:"db"})," attribute, and the new collection will be created in the current DB."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{ $out: "<output-collection>" }\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"$out"})," stage must be the last stage in the pipeline."]})}),"\n",(0,a.jsxs)(n.p,{children:["\uD83D\uDC50 Create a copy of the books with exactly 100 pages and output as a new collection named ",(0,a.jsx)(n.code,{children:"OneHundredPagesBooks"}),"."]}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"Answer"}),(0,a.jsx)("div",{children:(0,a.jsxs)(i.Z,{groupId:"aggregations",children:[(0,a.jsxs)(l.Z,{value:"atlas",label:"Atlas UI",children:[(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'[\n    {$match: {pages: 100}},\n    {$out: "OneHundredPagesBooks"}\n]\n'})}),(0,a.jsx)(n.p,{children:"Refresh the database to see the new collection."})]}),(0,a.jsxs)(l.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:[(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'let oneHundredPagesBooks = {$match: {pages: 100}};\nlet saveToNewCollection = {$out: "OneHundredPagesBooks"}\n\ndb.books.aggregate([\n    oneHundredPagesBooks,\n    saveToNewCollection\n]);\n'})}),(0,a.jsx)(n.p,{children:"After running this, we should see a new collection with:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"show collections\n"})})]})]})})]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.p,{children:["Reference: ",(0,a.jsxs)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/operator/aggregation/out/",children:["\uD83D\uDCD7 ",(0,a.jsx)(n.code,{children:"$out"})," documentation"]})]}),"\n",(0,a.jsx)(n.h2,{id:"merging-output-results",children:"Merging output results"}),"\n",(0,a.jsxs)(n.p,{children:["If the collection specified by the ",(0,a.jsx)(n.code,{children:"$out"})," operation already exists, then the ",(0,a.jsx)(n.code,{children:"$out"})," stage atomically replaces the existing collection with the new results collection upon completion of the aggregation."]}),"\n",(0,a.jsxs)(n.p,{children:["To avoid overwriting the existing collection, we can use ",(0,a.jsx)(n.code,{children:"$merge"})," instead of ",(0,a.jsx)(n.code,{children:"$out"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'{ $merge : { into : "newCollection" } }\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"If the collection does not exist, it will be created."}),"\n",(0,a.jsx)(n.li,{children:"If it exists, new data will be added."}),"\n",(0,a.jsxs)(n.li,{children:["If ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/operator/aggregation/merge/#std-label-merge-whenMatched",children:"a doc already exists"}),", we can replace it, keep the existing one, merge both documents, and cause the stage to fail or run a pipeline."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["This is perfect for creating ",(0,a.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/core/materialized-views/",children:"on-demand materialized views"})]}),"\n",(0,a.jsxs)(n.p,{children:["As an example, let's say we want the authors to contain all the books they've written, with all the book information. In this case, we'll do a ",(0,a.jsx)(n.code,{children:"$lookup"})," to get the book information into the authors collection. We can even use the name ",(0,a.jsx)(n.code,{children:"books"})," for the resulting data we're joining, shadowing the original ",(0,a.jsx)(n.code,{children:"books"})," array we have in authors. This way, it will look like the ",(0,a.jsx)(n.code,{children:"books"})," array changes."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'[\n    {$lookup: {\n        from: "books",\n        localField: "books",\n        foreignField: "_id",\n        as: "books"\n      } \n    },\n]\n'})}),"\n",(0,a.jsxs)(n.p,{children:['Now, a book will look like this. You can see that the books array has been "overwritten" by the ',(0,a.jsx)(n.code,{children:"$lookup"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n  "name": "Richard Bruce Wright",\n  "sanitizedName": "richardbrucewright",\n  "books": [\n    {\n      "_id": "0002005018",\n      "title": "Clara Callan: A novel",\n      "authors": [\n        {\n          "_id": {\n            "$oid": "64cc2db4830ba29148da4c3b"\n          },\n          "name": "Richard Bruce Wright"\n        }\n      ],\n      "genres": [\n        "Women Teachers",\n        "Young Women",\n        "Actresses",\n        "Sisters"\n      ],\n      "pages": 414,\n      "year": 2001,\n      "synopsis": "Giller Prize Winner 2001. Richard B. Wright. A Phyllis Bruce Book.",\n      "cover": "https://images.isbndb.com/covers/50/12/9780002005012.jpg",\n      "attributes": [\n        {\n          "key": "edition",\n          "value": "1st"\n        },\n        {\n          "key": "dimensions",\n          "value": "Height: 11.11 Inches, Length: 6.11 Inches, Weight: 1 Pounds, Width: 1.11 Inches"\n        },\n        {\n          "key": "isbn13",\n          "value": "9780002005012"\n        },\n        {\n          "key": "msrp",\n          "value": "0.00"\n        },\n        {\n          "key": "isbn",\n          "value": "0002005018"\n        },\n        {\n          "key": "isbn10",\n          "value": "0002005018"\n        }\n      ],\n      "totalInventory": 2,\n      "available": 3,\n      "binding": "Hardcover",\n      "language": "en",\n      "publisher": "HarperFlamingoCanada",\n      "longTitle": "Clara Callan: A novel",\n      "reviews": [\n        {\n          "_id": {\n            "$oid": "678900bc99a40f049f32d0be"\n          },\n          "text": "bbb",\n          "name": "Tawdry Lemur",\n          "rating": 5,\n          "timestamp": 1737031868630\n        },\n        {\n          "_id": {\n            "$oid": "672231e138e1f3e7c1c1c1cf"\n          },\n          "text": "testss",\n          "name": "Brash Iguana",\n          "rating": 4,\n          "timestamp": 1730294241948\n        },\n        {\n          "_id": {\n            "$oid": "6719acf4232c1a1deb2cbd7c"\n          },\n          "text": "hi",\n          "name": "Brash Rhino",\n          "rating": 5,\n          "timestamp": 1729735924953\n        },\n        {\n          "_id": {\n            "$oid": "6719ace0232c1a1deb2cbd7b"\n          },\n          "text": "good",\n          "name": "Killer Alligator",\n          "rating": 3,\n          "timestamp": 1729735904188\n        },\n        {\n          "_id": {\n            "$oid": "6719acdd232c1a1deb2cbd7a"\n          },\n          "text": "good",\n          "name": "Killer Alligator",\n          "rating": 5,\n          "timestamp": 1729735901895\n        }\n      ]\n    }\n  ],\n  "aliases": [\n    "Wright, Richard Bruce"\n  ]\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"We can go ahead and remove the authors from the books array, as it is redundant:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'[\n  {$lookup: {\n      from: "books",\n      localField: "books",\n      foreignField: "_id",\n      as: "books"\n    } \n  },\n  {$unset: \'books.authors\'},\n]\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Now that our authors look the way we want, we can overwrite the authors collection using ",(0,a.jsx)(n.code,{children:"$merge"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"[\n	{$lookup: {\n      from: \"books\",\n      localField: \"books\",\n      foreignField: \"_id\",\n      as: \"books\"\n    } \n  },\n  {$unset: 'books.authors'},\n  {$merge: {\n    into: 'authors',\n    on: '_id',\n    whenMatched: 'replace',\n  }}\n]\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["We use the ",(0,a.jsx)(n.code,{children:"_id"})," field to match documents."]}),"\n",(0,a.jsxs)(n.li,{children:["We replace the existing ones with ",(0,a.jsx)(n.code,{children:"replace"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"warning",children:(0,a.jsx)(n.p,{children:"We should see a message telling us that the $merge operator will cause the pipeline to persist the results to the specified location. This stage changes data."})})]})}function g(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},7645:function(e,n,t){t.d(n,{Z:()=>r});var o=t("5893");t("7294");var a=t("4904");function r(e){let{children:n,hidden:t,className:r}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,a.Z)("tabItem_Ymn6",r),hidden:t,children:n})}},8168:function(e,n,t){t.d(n,{Z:()=>f});var o=t("5893"),a=t("7294"),r=t("4904"),i=t("4718"),l=t("6550"),s=t("8714"),c=t("9207"),d=t("9413"),u=t("4510");function h(e){return a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||a.isValidElement(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function g(e){let{value:n,tabValues:t}=e;return t.some(e=>e.value===n)}var p=t("6735");function m(e){let{className:n,block:t,selectedValue:a,selectValue:l,tabValues:s}=e,c=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),u=e=>{let n=e.currentTarget,t=s[c.indexOf(n)].value;t!==a&&(d(n),l(t))},h=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{let t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{let t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1]}}n?.focus()};return(0,o.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},n),children:s.map(e=>{let{value:n,label:t,attributes:i}=e;return(0,o.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>{c.push(e)},onKeyDown:h,onClick:u,...i,className:(0,r.Z)("tabs__item","tabItem_LNqP",i?.className,{"tabs__item--active":a===n}),children:t??n},n)})})}function x(e){let{lazy:n,children:t,selectedValue:i}=e,l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){let e=l.find(e=>e.props.value===i);return e?(0,a.cloneElement)(e,{className:(0,r.Z)("margin-top--md",e.props.className)}):null}return(0,o.jsx)("div",{className:"margin-top--md",children:l.map((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==i}))})}function b(e){let n=function(e){let{defaultValue:n,queryString:t=!1,groupId:o}=e,r=function(e){let{values:n,children:t}=e;return(0,a.useMemo)(()=>{let e=n??h(t).map(e=>{let{props:{value:n,label:t,attributes:o,default:a}}=e;return{value:n,label:t,attributes:o,default:a}});return!function(e){let n=(0,d.lx)(e,(e,n)=>e.value===n.value);if(n.length>0)throw Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}(e),[i,p]=(0,a.useState)(()=>(function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!g({value:n,tabValues:t}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}let o=t.find(e=>e.default)??t[0];if(!o)throw Error("Unexpected error: 0 tabValues");return o.value})({defaultValue:n,tabValues:r})),[m,x]=function(e){let{queryString:n=!1,groupId:t}=e,o=(0,l.k6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c._X)(r),(0,a.useCallback)(e=>{if(!r)return;let n=new URLSearchParams(o.location.search);n.set(r,e),o.replace({...o.location,search:n.toString()})},[r,o])]}({queryString:t,groupId:o}),[b,f]=function(e){let{groupId:n}=e,t=n?`docusaurus.tab.${n}`:null,[o,r]=(0,u.Nk)(t);return[o,(0,a.useCallback)(e=>{t&&r.set(e)},[t,r])]}({groupId:o}),j=(()=>{let e=m??b;return g({value:e,tabValues:r})?e:null})();return(0,s.Z)(()=>{j&&p(j)},[j]),{selectedValue:i,selectValue:(0,a.useCallback)(e=>{if(!g({value:e,tabValues:r}))throw Error(`Can't select invalid tab value=${e}`);p(e),x(e),f(e)},[x,f,r]),tabValues:r}}(e);return(0,o.jsxs)("div",{className:(0,r.Z)("tabs-container","tabList__CuJ"),children:[(0,o.jsx)(m,{...n,...e}),(0,o.jsx)(x,{...n,...e})]})}function f(e){let n=(0,p.Z)();return(0,o.jsx)(b,{...e,children:h(e.children)},String(n))}},65:function(e,n,t){t.d(n,{Z:function(){return l},a:function(){return i}});var o=t(7294);let a={},r=o.createContext(a);function i(e){let n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);