"use strict";(self.webpackChunkaggregation_pipeline_workshop=self.webpackChunkaggregation_pipeline_workshop||[]).push([["1330"],{6534:function(e,a,n){n.r(a),n.d(a,{frontMatter:()=>o,default:()=>h,toc:()=>g,metadata:()=>t,assets:()=>l,contentTitle:()=>r});var t=JSON.parse('{"id":"what-is-aggregation/sql-vs-aggregation","title":"\uD83D\uDCD8 SQL vs Aggregations","description":"Let\'s compare SQL with an aggregation pipeline.","source":"@site/docs/20-what-is-aggregation/2-sql-vs-aggregation.mdx","sourceDirName":"20-what-is-aggregation","slug":"/what-is-aggregation/sql-vs-aggregation","permalink":"/aggregation-pipeline-lab/docs/what-is-aggregation/sql-vs-aggregation","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/aggregation-pipeline-lab/blob/main/docs/20-what-is-aggregation/2-sql-vs-aggregation.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"description":"Let\'s compare SQL with an aggregation pipeline."},"sidebar":"tutorialSidebar","previous":{"title":"\uD83D\uDCD8 What is an aggregation pipeline?","permalink":"/aggregation-pipeline-lab/docs/what-is-aggregation/what-is-aggregation"},"next":{"title":"\uD83D\uDCD8 Structure of an Aggregation Pipeline","permalink":"/aggregation-pipeline-lab/docs/what-is-aggregation/structure-aggregation"}}'),i=n(5893),s=n(65);let o={description:"Let's compare SQL with an aggregation pipeline."},r="\uD83D\uDCD8 SQL vs Aggregations",l={},g=[{value:"SQL",id:"sql",level:2},{value:"Get authors\u2019 bios with books that have an average 5-star rating",id:"get-authors-bios-with-books-that-have-an-average-5-star-rating",level:3},{value:"Get annual, average, and max spending from customers in all cities",id:"get-annual-average-and-max-spending-from-customers-in-all-cities",level:3},{value:"Equivalent MongoDB aggregation pipeline",id:"equivalent-mongodb-aggregation-pipeline",level:2},{value:"Get authors\u2019 bios with books that have an average 5-star rating",id:"get-authors-bios-with-books-that-have-an-average-5-star-rating-1",level:3},{value:"Get annual, average, and max spending from customers in all cities",id:"get-annual-average-and-max-spending-from-customers-in-all-cities-1",level:3}];function d(e){let a={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.header,{children:(0,i.jsx)(a.h1,{id:"-sql-vs-aggregations",children:"\uD83D\uDCD8 SQL vs Aggregations"})}),"\n",(0,i.jsx)(a.h2,{id:"sql",children:"SQL"}),"\n",(0,i.jsxs)(a.p,{children:["A SQL query statement usually starts with a ",(0,i.jsx)(a.code,{children:"SELECT"})," where we put a list of the fields we need, then a ",(0,i.jsx)(a.code,{children:"FROM"})," clause to state the table/s (or in this case, the subquery) that will return the rows. We can filter out using ",(0,i.jsx)(a.code,{children:"WHERE"})," and group data using ",(0,i.jsx)(a.code,{children:"GROUP"}),"."]}),"\n",(0,i.jsx)(a.p,{children:"We read this from the inside. If there's too much nesting, it's not easy to follow."}),"\n",(0,i.jsx)(a.h3,{id:"get-authors-bios-with-books-that-have-an-average-5-star-rating",children:"Get authors\u2019 bios with books that have an average 5-star rating"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-SQL",children:"SELECT authors.name, authors.bio\nFROM library.authors authors\nJOIN library.author_book author_book_join ON authors.id = author_book_join.author_id\nJOIN (\n    SELECT books.id\n    FROM library.books books\n    JOIN library.reviews reviews ON books.id = reviews.book_id\n    GROUP BY books.id\n    HAVING AVG(reviews.rating) = 5\n) five_star_books ON author_book_join.book_id = five_star_books.id;\n\n\n"})}),"\n",(0,i.jsx)(a.h3,{id:"get-annual-average-and-max-spending-from-customers-in-all-cities",children:"Get annual, average, and max spending from customers in all cities"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-SQL",children:'SELECT\n    city,\n    SUM(annual_spend) Total_Spend,\n    AVG(annual_spend) Average_Spend,\n    MAX(annual_spend) Max_Spend,\n    COUNT(annual_spend) customers\nFROM (\n    SELECT t1.city, customer.annual_spend\n    FROM customer \n    LEFT JOIN (\n        SELECT address.address_id, city.city,\n               address.customer_id, address.location\n        FROM address LEFT JOIN city\n        ON address.city_id = city.city_id\n        ) AS t1\n    ON\n    (customer.customer_id = t1.customer_id AND\n              t1.location = "home")\n) AS t2\nGROUP BY city;\n'})}),"\n",(0,i.jsx)(a.h2,{id:"equivalent-mongodb-aggregation-pipeline",children:"Equivalent MongoDB aggregation pipeline"}),"\n",(0,i.jsx)(a.h3,{id:"get-authors-bios-with-books-that-have-an-average-5-star-rating-1",children:"Get authors\u2019 bios with books that have an average 5-star rating"}),"\n",(0,i.jsx)(a.p,{children:"We go through four stages:"}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsx)(a.li,{children:"Group all the reviews for every book, calculating the average rating."}),"\n",(0,i.jsx)(a.li,{children:"Filter out all average ratings other than 5."}),"\n",(0,i.jsx)(a.li,{children:"Now we have reviews with 5 stars, but we also want the author bio, so we join with author to get the bio."}),"\n",(0,i.jsxs)(a.li,{children:["We add a new field called ",(0,i.jsx)(a.code,{children:"bio"})," with just the author's bio."]}),"\n"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-js",children:'db.reviews.aggregate([\n  { \n    $group: {\n        _id: "$bookId",\n        averageRating: {\n          $avg: "$rating",\n        },\n      },\n  },\n  { $match: { averageRating: 5 } },\n  { $lookup: {\n        from: "authors",\n        localField: "_id",\n        foreignField: "books",\n        as: "author",\n      },\n  },\n  {$addFields: {\n    bio: "$author.bio"\n  }},\n])\n\n\n'})}),"\n",(0,i.jsx)(a.h3,{id:"get-annual-average-and-max-spending-from-customers-in-all-cities-1",children:"Get annual, average, and max spending from customers in all cities"}),"\n",(0,i.jsxs)(a.p,{children:["Here we pass three stages: one to return one document per element in the ",(0,i.jsx)(a.code,{children:"address"})," array, and then we filter out to get only the documents that have a ",(0,i.jsx)(a.code,{children:"home"})," address location. Finally, we do the grouping. As we'll see, this can be split and tested separately and resembles our code."]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-js",children:'db.customers.aggregate([\n	{\n		$unwind: "$address",\n	},\n	{\n		$match: {"address.location": "home"}\n	},\n	{\n		 $group: {\n			_id: "$address.city",\n			totalSpend: {$sum: "$annualSpend"},\n			averageSpend: {$avg: "$annualSpend"},\n			maximumSpend: {$max: "$annualSpend"},\n			customers: {$sum: 1}\n		}\n	}\n])\n'})}),"\n",(0,i.jsx)(a.admonition,{type:"info",children:(0,i.jsxs)(a.p,{children:["See also ",(0,i.jsx)(a.a,{href:"https://www.mongodb.com/docs/manual/reference/sql-aggregation-comparison/",children:"SQL to Aggregation Mapping Chart"})]})})]})}function h(e={}){let{wrapper:a}={...(0,s.a)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},65:function(e,a,n){n.d(a,{Z:()=>r,a:()=>o});var t=n(7294);let i={},s=t.createContext(i);function o(e){let a=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:a},e.children)}}}]);