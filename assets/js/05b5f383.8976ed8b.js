"use strict";(self.webpackChunkaggregation_pipeline_workshop=self.webpackChunkaggregation_pipeline_workshop||[]).push([["695"],{382:function(e,n,o){o.r(n),o.d(n,{default:()=>p,frontMatter:()=>i,metadata:()=>t,assets:()=>d,toc:()=>u,contentTitle:()=>c});var t=JSON.parse('{"id":"lookups/advanced-lookups","title":"\uD83E\uDDB8\u200D\u2642\uFE0F Advanced Lookups","description":"Extra activity! Do it if you have extra time or are following along at home. It won\'t be covered during the hands-on lab.","source":"@site/docs/60-lookups/2-advanced-lookups.mdx","sourceDirName":"60-lookups","slug":"/lookups/advanced-lookups","permalink":"/aggregation-pipeline-lab/docs/lookups/advanced-lookups","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/aggregation-pipeline-lab/blob/main/docs/60-lookups/2-advanced-lookups.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\uD83D\uDC50 Lookups, AKA Left Outer Join","permalink":"/aggregation-pipeline-lab/docs/lookups/lookups"},"next":{"title":"Grouping Results","permalink":"/aggregation-pipeline-lab/docs/category/grouping-results"}}'),r=o("5893"),a=o("65"),s=o("8168"),l=o("7645");let i={},c="\uD83E\uDDB8\u200D\u2642\uFE0F Advanced Lookups",d={},u=[];function h(e){let n={admonition:"admonition",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"\uFE0F-advanced-lookups",children:"\uD83E\uDDB8\u200D\u2642\uFE0F Advanced Lookups"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"Extra activity! Do it if you have extra time or are following along at home. It won't be covered during the hands-on lab."})}),"\n",(0,r.jsxs)(n.p,{children:["We get this request: Write a ",(0,r.jsx)(n.code,{children:"$lookup"})," to get ",(0,r.jsx)(n.code,{children:"name"})," and ",(0,r.jsx)(n.code,{children:"bio"})," from author's information inside each book document. To get this done, we need to review several things:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Each book can have several authors. This many-to-many relationship (as an author can also write many books) is modeled using two different arrays: a ",(0,r.jsx)(n.code,{children:"books"})," array in the ",(0,r.jsx)(n.code,{children:"authors"})," collection and an ",(0,r.jsx)(n.code,{children:"authors"})," array in the ",(0,r.jsx)(n.code,{children:"books"})," collection."]}),"\n",(0,r.jsxs)(n.li,{children:["So we'll need to get a separate document for each book that has more than one author. If a book has three authors, we'll use ",(0,r.jsx)(n.code,{children:"$unwind"})," to get three documents with the same data except for the author, which will be each of the three authors."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"You can try this with this aggregation pipeline:"}),"\n",(0,r.jsxs)(s.Z,{groupId:"aggregations",children:[(0,r.jsx)(l.Z,{value:"atlas",label:"Atlas UI",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'[\n  // as a book can have many authors, we get one doc per book\'s author\n  {$unwind: "$authors"},\n  // remove some noisy fields\n  {$project: {attributes: 0, reviews: 0}}\n]\n'})})}),(0,r.jsx)(l.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'db.books.aggregate([\n  // as a book can have many authors, we get one doc per book\'s author\n  {$unwind: "$authors"},\n  // remove some noisy fields\n  {$project: {attributes: 0, reviews: 0}}\n])\n'})})})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Now, we need to get the authors' information. For that, we'll use ",(0,r.jsx)(n.code,{children:"$lookup"}),", linking the ",(0,r.jsx)(n.code,{children:"_id"})," in the ",(0,r.jsx)(n.code,{children:"authors"})," collection with the ",(0,r.jsx)(n.code,{children:"_id"})," we have in each book's ",(0,r.jsx)(n.code,{children:"authors"})," array. But as we can see here, these have a different type: The ones inside our array are strings, while the ",(0,r.jsx)(n.code,{children:"author"})," collection ",(0,r.jsx)(n.code,{children:"_id"})," are ",(0,r.jsx)(n.code,{children:"ObjectId"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"  authors: {\n    _id: '64cc2db4830ba29148da64a2',\n    name: 'Timothy Findley'\n  },\n"})}),"\n",(0,r.jsxs)(n.p,{children:["So we need to convert from ",(0,r.jsx)(n.code,{children:"String"})," into ",(0,r.jsx)(n.code,{children:"ObjectId"}),". We can do that using ",(0,r.jsx)(n.code,{children:"$toObjectId"}),". This will add a new field, ",(0,r.jsx)(n.code,{children:"authorId"}),", converting it into ",(0,r.jsx)(n.code,{children:"ObjectId"}),":"]}),"\n",(0,r.jsxs)(s.Z,{groupId:"aggregations",children:[(0,r.jsx)(l.Z,{value:"atlas",label:"Atlas UI",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'[\n  // as a book can have many authors, we get one doc per book\'s author\n  {$unwind: "$authors"},\n  // convert it to an objectId\n  {"$set":{"authorId":{"$toObjectId":"$authors._id"}}},\n  // remove some noisy fields\n  {$project: {attributes: 0, reviews: 0}}\n]\n'})})}),(0,r.jsx)(l.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'db.books.aggregate([\n  // as a book can have many authors, we get one doc per book\'s author\n  {$unwind: "$authors"},\n  // convert it to an objectId\n  {"$set":{"authorId":{"$toObjectId":"$authors._id"}}},\n  // remove some noisy fields\n  {$project: {attributes: 0, reviews: 0}}\n])\n'})})})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Now, we're ready to do the ",(0,r.jsx)(n.code,{children:"$lookup"}),": We want all documents from ",(0,r.jsx)(n.code,{children:"authors"})," that have the same ",(0,r.jsx)(n.code,{children:"_id"})," as the ",(0,r.jsx)(n.code,{children:"authorId"})," we just created. We use a ",(0,r.jsx)(n.code,{children:"pipeline"})," to get just ",(0,r.jsx)(n.code,{children:"authors"})," ",(0,r.jsx)(n.code,{children:"name"})," and ",(0,r.jsx)(n.code,{children:"bio"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(s.Z,{groupId:"aggregations",children:[(0,r.jsx)(l.Z,{value:"atlas",label:"Atlas UI",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'[\n  // as a book can have many authors, we get one doc per book\'s author\n  {$unwind: "$authors"},\n  // convert it to an objectId\n  {"$set":{"authorId":{"$toObjectId":"$authors._id"}}},\n  {$lookup: {\n      from: "authors",\n      localField: "authorId",\n      foreignField: "_id",\n      pipeline: [\n          {$project: {name: 1, bio: 1}},\n      ],\n      as: "bookAuthorDetails"\n    } \n  },\n  // remove some noisy fields\n  {$project: {attributes: 0, reviews: 0}}\n]\n'})})}),(0,r.jsx)(l.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'db.books.aggregate([\n  // as a book can have many authors, we get one doc per book\'s author\n  {$unwind: "$authors"},\n  // convert it to an objectId\n  {"$set":{"authorId":{"$toObjectId":"$authors._id"}}},\n  {$lookup: {\n      from: "authors",\n      localField: "authorId",\n      foreignField: "_id",\n      pipeline: [\n          {$project: {name: 1, bio: 1}},\n      ],\n      as: "bookAuthorDetails"\n    } \n  },\n  // remove some noisy fields\n  {$project: {attributes: 0, reviews: 0}}\n])\n'})})})]})]})}function p(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},7645:function(e,n,o){o.d(n,{Z:()=>a});var t=o("5893");o("7294");var r=o("4904");function a(e){let{children:n,hidden:o,className:a}=e;return(0,t.jsx)("div",{role:"tabpanel",className:(0,r.Z)("tabItem_Ymn6",a),hidden:o,children:n})}},8168:function(e,n,o){o.d(n,{Z:()=>f});var t=o("5893"),r=o("7294"),a=o("4904"),s=o("4718"),l=o("6550"),i=o("8714"),c=o("9207"),d=o("9413"),u=o("4510");function h(e){return r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||r.isValidElement(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){let{value:n,tabValues:o}=e;return o.some(e=>e.value===n)}var m=o("6735");function b(e){let{className:n,block:o,selectedValue:r,selectValue:l,tabValues:i}=e,c=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),u=e=>{let n=e.currentTarget,o=i[c.indexOf(n)].value;o!==r&&(d(n),l(o))},h=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{let o=c.indexOf(e.currentTarget)+1;n=c[o]??c[0];break}case"ArrowLeft":{let o=c.indexOf(e.currentTarget)-1;n=c[o]??c[c.length-1]}}n?.focus()};return(0,t.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":o},n),children:i.map(e=>{let{value:n,label:o,attributes:s}=e;return(0,t.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>{c.push(e)},onKeyDown:h,onClick:u,...s,className:(0,a.Z)("tabs__item","tabItem_LNqP",s?.className,{"tabs__item--active":r===n}),children:o??n},n)})})}function g(e){let{lazy:n,children:o,selectedValue:s}=e,l=(Array.isArray(o)?o:[o]).filter(Boolean);if(n){let e=l.find(e=>e.props.value===s);return e?(0,r.cloneElement)(e,{className:(0,a.Z)("margin-top--md",e.props.className)}):null}return(0,t.jsx)("div",{className:"margin-top--md",children:l.map((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==s}))})}function j(e){let n=function(e){let{defaultValue:n,queryString:o=!1,groupId:t}=e,a=function(e){let{values:n,children:o}=e;return(0,r.useMemo)(()=>{let e=n??h(o).map(e=>{let{props:{value:n,label:o,attributes:t,default:r}}=e;return{value:n,label:o,attributes:t,default:r}});return!function(e){let n=(0,d.lx)(e,(e,n)=>e.value===n.value);if(n.length>0)throw Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,o])}(e),[s,m]=(0,r.useState)(()=>(function(e){let{defaultValue:n,tabValues:o}=e;if(0===o.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:o}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${o.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}let t=o.find(e=>e.default)??o[0];if(!t)throw Error("Unexpected error: 0 tabValues");return t.value})({defaultValue:n,tabValues:a})),[b,g]=function(e){let{queryString:n=!1,groupId:o}=e,t=(0,l.k6)(),a=function(e){let{queryString:n=!1,groupId:o}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!o)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return o??null}({queryString:n,groupId:o});return[(0,c._X)(a),(0,r.useCallback)(e=>{if(!a)return;let n=new URLSearchParams(t.location.search);n.set(a,e),t.replace({...t.location,search:n.toString()})},[a,t])]}({queryString:o,groupId:t}),[j,f]=function(e){let{groupId:n}=e,o=n?`docusaurus.tab.${n}`:null,[t,a]=(0,u.Nk)(o);return[t,(0,r.useCallback)(e=>{o&&a.set(e)},[o,a])]}({groupId:t}),x=(()=>{let e=b??j;return p({value:e,tabValues:a})?e:null})();return(0,i.Z)(()=>{x&&m(x)},[x]),{selectedValue:s,selectValue:(0,r.useCallback)(e=>{if(!p({value:e,tabValues:a}))throw Error(`Can't select invalid tab value=${e}`);m(e),g(e),f(e)},[g,f,a]),tabValues:a}}(e);return(0,t.jsxs)("div",{className:(0,a.Z)("tabs-container","tabList__CuJ"),children:[(0,t.jsx)(b,{...n,...e}),(0,t.jsx)(g,{...n,...e})]})}function f(e){let n=(0,m.Z)();return(0,t.jsx)(j,{...e,children:h(e.children)},String(n))}},65:function(e,n,o){o.d(n,{Z:function(){return l},a:function(){return s}});var t=o(7294);let r={},a=t.createContext(r);function s(e){let n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);