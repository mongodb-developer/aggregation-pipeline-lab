"use strict";(self.webpackChunkaggregation_pipeline_workshop=self.webpackChunkaggregation_pipeline_workshop||[]).push([["448"],{4070:function(e,n,t){t.r(n),t.d(n,{default:()=>g,frontMatter:()=>i,metadata:()=>a,assets:()=>u,toc:()=>d,contentTitle:()=>c});var a=JSON.parse('{"id":"counting-sorting/counting-documents","title":"\uD83D\uDC50 $count","description":"How can we be sure that this pipeline is returning exactly 15 books?","source":"@site/docs/50-counting-sorting/1-counting-documents.mdx","sourceDirName":"50-counting-sorting","slug":"/counting-sorting/counting-documents","permalink":"/aggregation-pipeline-lab/docs/counting-sorting/counting-documents","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/aggregation-pipeline-lab/blob/main/docs/50-counting-sorting/1-counting-documents.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Counting and Sorting","permalink":"/aggregation-pipeline-lab/docs/category/counting-and-sorting"},"next":{"title":"\uD83D\uDC50 Sorting","permalink":"/aggregation-pipeline-lab/docs/counting-sorting/sorting"}}'),o=t("5893"),r=t("65"),l=t("8168"),s=t("7645");let i={},c="\uD83D\uDC50 $count",u={},d=[{value:"The order of stages is important",id:"the-order-of-stages-is-important",level:2}];function h(e){let n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.a)(),...e.components},{Details:t}=n;return t||function(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"-count",children:"\uD83D\uDC50 $count"})}),"\n",(0,o.jsx)(n.p,{children:"How can we be sure that this pipeline is returning exactly 15 books?"}),"\n",(0,o.jsxs)(l.Z,{groupId:"aggregations",children:[(0,o.jsx)(s.Z,{value:"atlas",label:"Atlas UI",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"[\n    {$match: {$and: [{year: 1985}, {pages: {$gte: 150}}]}},\n    {$project: {_id: 0, title: 1, year: 1, totalInventory: 1, available: 1}},\n    {$limit: 15}\n]\n"})})}),(0,o.jsx)(s.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"db.books.aggregate([\n    {$match: {$and: [{year: 1985}, {pages: {$gte: 150}}]}},\n    {$project: {_id: 0, title: 1, year: 1, totalInventory: 1, available: 1}},\n    {$limit: 15}\n]);\n"})})}),(0,o.jsx)(s.Z,{value:"js",label:"Javascript",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"let moreThan150pages =  {pages: {$gte: 150}}\nlet booksFrom1985WithMoreThan150pages = {$match: {$and: [{year: 1985}, moreThan150pages]}};\nlet showOnlyTheseFields = {$project: {_id: 0, title: 1, year: 1, totalInventory: 1, available: 1}};\nlet getJust15books =  {$limit: 15};\n\ndb.books.aggregate([\n    booksFrom1985WithMoreThan150pages,\n    showOnlyTheseFields,\n    getJust15books,\n]);\n"})})})]}),"\n",(0,o.jsx)(n.p,{children:"By counting the books! Let's add a new stage to the pipeline to count those books:"}),"\n",(0,o.jsxs)(l.Z,{groupId:"aggregations",children:[(0,o.jsx)(s.Z,{value:"atlas",label:"Atlas UI",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'[\n    {$match: {$and: [{year: 1985}, {pages: {$gte: 150}} ]}},\n    {$project: {_id: 0, title: 1, year: 1, totalInventory: 1, available: 1}},\n    {$limit: 15},\n    {$count: "totalBooks"},\n]\n'})})}),(0,o.jsx)(s.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'db.books.aggregate([\n    {$match: {$and: [{year: 1985}, {pages: {$gte: 150}} ]}},\n    {$project: {_id: 0, title: 1, year: 1, totalInventory: 1, available: 1}},\n    {$limit: 15},\n    {$count: "totalBooks"},\n]);\n'})})}),(0,o.jsx)(s.Z,{value:"js",label:"Javascript",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'let moreThan150pages =  {pages: {$gte: 150}}\nlet booksFrom1985WithMoreThan150pages = {$match: {$and: [{year: 1985}, moreThan150pages]}};\nlet showOnlyTheseFields = {$project: {_id: 0, title: 1, year: 1, totalInventory: 1, available: 1}};\nlet getJust15books =  {$limit: 15};\nlet count = {$count: "totalBooks"}\n\ndb.books.aggregate([\n    booksFrom1985WithMoreThan150pages,\n    showOnlyTheseFields,\n    getJust15books,\n    count,\n]);\n'})})})]}),"\n",(0,o.jsxs)(n.p,{children:["Here, ",(0,o.jsx)(n.code,{children:"$count"})," will count the resulting docs and will return a document with just one field: ",(0,o.jsx)(n.code,{children:"totalBooks"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"{\n  totalBooks: 15\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["\uD83D\uDC50 How many authors do we have in our ",(0,o.jsx)(n.code,{children:"authors"})," collection?"]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Answer"}),(0,o.jsx)("div",{children:(0,o.jsxs)(l.Z,{groupId:"aggregations",children:[(0,o.jsx)(s.Z,{value:"atlas",label:"Atlas UI",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'[ {$count: "authorCount"} ]\n'})})}),(0,o.jsx)(s.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'db.authors.aggregate([{$count: "authorCount"}])\n'})})})]})})]}),"\n",(0,o.jsx)(n.h2,{id:"the-order-of-stages-is-important",children:"The order of stages is important"}),"\n",(0,o.jsxs)(n.p,{children:["If we count after the ",(0,o.jsx)(n.code,{children:"$match"})," stage, the document we're passing to the next steps contains only the ",(0,o.jsx)(n.code,{children:"totalBooks"})," field. So the ",(0,o.jsx)(n.code,{children:"$project"})," stage will return an empty document."]}),"\n",(0,o.jsxs)(l.Z,{groupId:"aggregations",children:[(0,o.jsx)(s.Z,{value:"atlas",label:"Atlas UI",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'[\n    {$match: {$and: [{year: 1985}, {pages: {$gte: 150}} ]}},\n    {$count: "totalBooks"},\n    {$project: {_id: 0, title: 1, year: 1, totalInventory: 1, available: 1}},\n    {$limit: 15},\n]\n'})})}),(0,o.jsx)(s.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'db.books.aggregate([\n    {$match: {$and: [{year: 1985}, {pages: {$gte: 150}} ]}},\n    {$count: "totalBooks"},\n    {$project: {_id: 0, title: 1, year: 1, totalInventory: 1, available: 1}},\n    {$limit: 15},\n]);\n'})})}),(0,o.jsx)(s.Z,{value:"js",label:"Javascript",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'let moreThan150pages =  {pages: {$gte: 150}}\nlet booksFrom1985WithMoreThan150pages = {$match: {$and: [{year: 1985}, moreThan150pages]}};\nlet showOnlyTheseFields = {$project: {_id: 0, title: 1, year: 1, totalInventory: 1, available: 1}};\nlet getJust15books =  {$limit: 15};\nlet count = {$count: "totalBooks"}\n\ndb.books.aggregate([\n    booksFrom1985WithMoreThan150pages,\n    count,\n    showOnlyTheseFields,\n    getJust15books,\n]);\n'})})})]})]})}function g(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},7645:function(e,n,t){t.d(n,{Z:()=>r});var a=t("5893");t("7294");var o=t("4904");function r(e){let{children:n,hidden:t,className:r}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,o.Z)("tabItem_Ymn6",r),hidden:t,children:n})}},8168:function(e,n,t){t.d(n,{Z:()=>f});var a=t("5893"),o=t("7294"),r=t("4904"),l=t("4718"),s=t("6550"),i=t("8714"),c=t("9207"),u=t("9413"),d=t("4510");function h(e){return o.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||o.isValidElement(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function g(e){let{value:n,tabValues:t}=e;return t.some(e=>e.value===n)}var p=t("6735");function m(e){let{className:n,block:t,selectedValue:o,selectValue:s,tabValues:i}=e,c=[],{blockElementScrollPositionUntilNextRender:u}=(0,l.o5)(),d=e=>{let n=e.currentTarget,t=i[c.indexOf(n)].value;t!==o&&(u(n),s(t))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{let t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{let t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1]}}n?.focus()};return(0,a.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},n),children:i.map(e=>{let{value:n,label:t,attributes:l}=e;return(0,a.jsx)("li",{role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,ref:e=>{c.push(e)},onKeyDown:h,onClick:d,...l,className:(0,r.Z)("tabs__item","tabItem_LNqP",l?.className,{"tabs__item--active":o===n}),children:t??n},n)})})}function b(e){let{lazy:n,children:t,selectedValue:l}=e,s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){let e=s.find(e=>e.props.value===l);return e?(0,o.cloneElement)(e,{className:(0,r.Z)("margin-top--md",e.props.className)}):null}return(0,a.jsx)("div",{className:"margin-top--md",children:s.map((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==l}))})}function j(e){let n=function(e){let{defaultValue:n,queryString:t=!1,groupId:a}=e,r=function(e){let{values:n,children:t}=e;return(0,o.useMemo)(()=>{let e=n??h(t).map(e=>{let{props:{value:n,label:t,attributes:a,default:o}}=e;return{value:n,label:t,attributes:a,default:o}});return!function(e){let n=(0,u.lx)(e,(e,n)=>e.value===n.value);if(n.length>0)throw Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}(e),[l,p]=(0,o.useState)(()=>(function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!g({value:n,tabValues:t}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}let a=t.find(e=>e.default)??t[0];if(!a)throw Error("Unexpected error: 0 tabValues");return a.value})({defaultValue:n,tabValues:r})),[m,b]=function(e){let{queryString:n=!1,groupId:t}=e,a=(0,s.k6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c._X)(r),(0,o.useCallback)(e=>{if(!r)return;let n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})},[r,a])]}({queryString:t,groupId:a}),[j,f]=function(e){let{groupId:n}=e,t=n?`docusaurus.tab.${n}`:null,[a,r]=(0,d.Nk)(t);return[a,(0,o.useCallback)(e=>{t&&r.set(e)},[t,r])]}({groupId:a}),x=(()=>{let e=m??j;return g({value:e,tabValues:r})?e:null})();return(0,i.Z)(()=>{x&&p(x)},[x]),{selectedValue:l,selectValue:(0,o.useCallback)(e=>{if(!g({value:e,tabValues:r}))throw Error(`Can't select invalid tab value=${e}`);p(e),b(e),f(e)},[b,f,r]),tabValues:r}}(e);return(0,a.jsxs)("div",{className:(0,r.Z)("tabs-container","tabList__CuJ"),children:[(0,a.jsx)(m,{...n,...e}),(0,a.jsx)(b,{...n,...e})]})}function f(e){let n=(0,p.Z)();return(0,a.jsx)(j,{...e,children:h(e.children)},String(n))}},65:function(e,n,t){t.d(n,{Z:function(){return s},a:function(){return l}});var a=t(7294);let o={},r=a.createContext(o);function l(e){let n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);