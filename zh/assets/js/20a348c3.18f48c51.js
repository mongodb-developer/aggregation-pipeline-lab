"use strict";(self.webpackChunkaggregation_pipeline_workshop=self.webpackChunkaggregation_pipeline_workshop||[]).push([["2023"],{6703:function(e,n,t){t.r(n),t.d(n,{default:()=>g,frontMatter:()=>s,metadata:()=>r,assets:()=>u,toc:()=>h,contentTitle:()=>c});var r=JSON.parse('{"id":"using-arrays/simple-match-array","title":"\uD83D\uDC50 Simple Arrays","description":"\uD83D\uDC50 Get all the science fiction books","source":"@site/docs/40-using-arrays/20-simple-match-array.mdx","sourceDirName":"40-using-arrays","slug":"/using-arrays/simple-match-array","permalink":"/aggregation-pipeline-lab/zh/docs/using-arrays/simple-match-array","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/aggregation-pipeline-lab/blob/main/docs/40-using-arrays/20-simple-match-array.mdx","tags":[],"version":"current","sidebarPosition":20,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\uD83D\uDC50 Types of Arrays","permalink":"/aggregation-pipeline-lab/zh/docs/using-arrays/types-of-arrays"},"next":{"title":"\uD83D\uDC50 Searching Inside Objects in Arrays","permalink":"/aggregation-pipeline-lab/zh/docs/using-arrays/search-inside-objects-in-arrays"}}'),a=t("5893"),i=t("65"),l=t("8168"),o=t("7645");let s={},c="\uD83D\uDC50 Simple Arrays",u={},h=[{value:"\uD83D\uDC50 Get all the science fiction books",id:"-get-all-the-science-fiction-books",level:2},{value:"\uD83D\uDC50 Find all the books that belong at least to both genres &quot;Fiction&quot; and &quot;Science Fiction&quot;",id:"-find-all-the-books-that-belong-at-least-to-both-genres-fiction-and-science-fiction",level:2},{value:"\uD83D\uDC50 Find books with either genre",id:"-find-books-with-either-genre",level:2},{value:"\uD83D\uDC50 Find all the books that belong only to the genres &quot;Fiction&quot; and &quot;Science Fiction&quot;",id:"-find-all-the-books-that-belong-only-to-the-genres-fiction-and-science-fiction",level:2}];function d(e){let n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"-simple-arrays",children:"\uD83D\uDC50 Simple Arrays"})}),"\n",(0,a.jsx)(n.h2,{id:"-get-all-the-science-fiction-books",children:"\uD83D\uDC50 Get all the science fiction books"}),"\n",(0,a.jsxs)(n.p,{children:["Can I get all books for the genre ",(0,a.jsx)(n.code,{children:"Science Fiction"}),"? Turns out it's quite simple:"]}),"\n",(0,a.jsxs)(l.Z,{groupId:"aggregations",children:[(0,a.jsx)(o.Z,{value:"atlas",label:"Atlas UI",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"[\n  { \n    $match: { \n      genres: 'Science Fiction' \n    } \n  }\n]\n"})})}),(0,a.jsx)(o.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"db.books.aggregate([\n  { \n    $match: { \n      genres: 'Science Fiction' \n    } \n  }\n])\n"})})})]}),"\n",(0,a.jsxs)(n.p,{children:["Remember that will include any book that has any other genre as long as it has ",(0,a.jsx)(n.code,{children:"Science Fiction"})," in ",(0,a.jsx)(n.code,{children:"genres"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"-find-all-the-books-that-belong-at-least-to-both-genres-fiction-and-science-fiction",children:'\uD83D\uDC50 Find all the books that belong at least to both genres "Fiction" and "Science Fiction"'}),"\n",(0,a.jsx)(n.p,{children:'If you want to search for all books that have "Fiction" and "Science Fiction," in any order (and possibly other genres), use:'}),"\n",(0,a.jsxs)(l.Z,{groupId:"aggregations",children:[(0,a.jsx)(o.Z,{value:"atlas",label:"Atlas UI",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"[\n  {$match: { \n      genres: {$all: ['Science Fiction', 'Fiction'] } \n      } \n  },\n  {$project: {\n      title: 1,\n      genres: 1\n  }}\n]\n"})})}),(0,a.jsx)(o.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"db.books.aggregate([\n  {$match: { \n      genres: {$all: ['Science Fiction', 'Fiction'] } \n      } \n  },\n  {$project: {\n      title: 1,\n      genres: 1\n  }}\n])\n"})})})]}),"\n",(0,a.jsx)(n.h2,{id:"-find-books-with-either-genre",children:"\uD83D\uDC50 Find books with either genre"}),"\n",(0,a.jsxs)(l.Z,{groupId:"aggregations",children:[(0,a.jsx)(o.Z,{value:"atlas",label:"Atlas UI",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"[{ \n    $match: {\n      genres: { $in: ['Science Fiction', 'Fiction'] }\n    }\n  }\n]\n"})})}),(0,a.jsx)(o.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"db.books.aggregate([{ \n    $match: {\n      genres: { $in: ['Science Fiction', 'Fiction'] }\n    }\n  }\n]);\n"})})})]}),"\n",(0,a.jsx)(n.h2,{id:"-find-all-the-books-that-belong-only-to-the-genres-fiction-and-science-fiction",children:'\uD83D\uDC50 Find all the books that belong only to the genres "Fiction" and "Science Fiction"'}),"\n",(0,a.jsxs)(n.p,{children:['In this case, we want books that have both "Fiction" and "Science Fiction" in the genres array ',(0,a.jsx)(n.em,{children:"and nothing else"}),". So we're looking for documents that contain a ",(0,a.jsx)(n.code,{children:"genres"})," array exactly as ",(0,a.jsx)(n.code,{children:"['Fiction', 'Science Fiction']"}),". We're not looking for the individual genres that could be inside the array. Instead, we are comparing the whole array on each document."]}),"\n",(0,a.jsxs)(l.Z,{groupId:"aggregations",children:[(0,a.jsx)(o.Z,{value:"atlas",label:"Atlas UI",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"[\n  {$match: { \n      genres: ['Fiction', 'Science Fiction'] \n    } \n  },\n  {$project: {\n    title: 1,\n    genres: 1\n  }}\n]\n"})})}),(0,a.jsx)(o.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"db.books.aggregate([\n  {$match: { \n      genres: ['Fiction', 'Science Fiction'] \n    } \n  },\n  {$project: {\n    title: 1,\n    genres: 1\n  }}\n])\n"})})})]}),"\n",(0,a.jsxs)(n.p,{children:["Here, we're comparing the whole array. ",(0,a.jsx)(n.strong,{children:"Element order is important"}),". With this comparison, you'll get nothing in return:"]}),"\n",(0,a.jsxs)(l.Z,{groupId:"aggregations",children:[(0,a.jsx)(o.Z,{value:"atlas",label:"Atlas UI",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"[\n  {$match: { \n      genres: ['Science Fiction', 'Fiction'] \n    } \n  },\n  {$project: {\n    title: 1,\n    genres: 1\n  }}\n]\n"})})}),(0,a.jsx)(o.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"db.books.aggregate([\n  {$match: { \n      genres: ['Science Fiction', 'Fiction'] \n    } \n  },\n  {$project: {\n    title: 1,\n    genres: 1\n  }}\n])\n"})})})]})]})}function g(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},7645:function(e,n,t){t.d(n,{Z:()=>i});var r=t("5893");t("7294");var a=t("4904");function i(e){let{children:n,hidden:t,className:i}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.Z)("tabItem_Ymn6",i),hidden:t,children:n})}},8168:function(e,n,t){t.d(n,{Z:()=>j});var r=t("5893"),a=t("7294"),i=t("4904"),l=t("4718"),o=t("6550"),s=t("8714"),c=t("9207"),u=t("9413"),h=t("4510");function d(e){return a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||a.isValidElement(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function g(e){let{value:n,tabValues:t}=e;return t.some(e=>e.value===n)}var p=t("6735");function b(e){let{className:n,block:t,selectedValue:a,selectValue:o,tabValues:s}=e,c=[],{blockElementScrollPositionUntilNextRender:u}=(0,l.o5)(),h=e=>{let n=e.currentTarget,t=s[c.indexOf(n)].value;t!==a&&(u(n),o(t))},d=e=>{let n=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{let t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{let t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1]}}n?.focus()};return(0,r.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},n),children:s.map(e=>{let{value:n,label:t,attributes:l}=e;return(0,r.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>{c.push(e)},onKeyDown:d,onClick:h,...l,className:(0,i.Z)("tabs__item","tabItem_LNqP",l?.className,{"tabs__item--active":a===n}),children:t??n},n)})})}function m(e){let{lazy:n,children:t,selectedValue:l}=e,o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){let e=o.find(e=>e.props.value===l);return e?(0,a.cloneElement)(e,{className:(0,i.Z)("margin-top--md",e.props.className)}):null}return(0,r.jsx)("div",{className:"margin-top--md",children:o.map((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==l}))})}function f(e){let n=function(e){let{defaultValue:n,queryString:t=!1,groupId:r}=e,i=function(e){let{values:n,children:t}=e;return(0,a.useMemo)(()=>{let e=n??d(t).map(e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}});return!function(e){let n=(0,u.lx)(e,(e,n)=>e.value===n.value);if(n.length>0)throw Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}(e),[l,p]=(0,a.useState)(()=>(function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!g({value:n,tabValues:t}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}let r=t.find(e=>e.default)??t[0];if(!r)throw Error("Unexpected error: 0 tabValues");return r.value})({defaultValue:n,tabValues:i})),[b,m]=function(e){let{queryString:n=!1,groupId:t}=e,r=(0,o.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c._X)(i),(0,a.useCallback)(e=>{if(!i)return;let n=new URLSearchParams(r.location.search);n.set(i,e),r.replace({...r.location,search:n.toString()})},[i,r])]}({queryString:t,groupId:r}),[f,j]=function(e){let{groupId:n}=e,t=n?`docusaurus.tab.${n}`:null,[r,i]=(0,h.Nk)(t);return[r,(0,a.useCallback)(e=>{t&&i.set(e)},[t,i])]}({groupId:r}),x=(()=>{let e=b??f;return g({value:e,tabValues:i})?e:null})();return(0,s.Z)(()=>{x&&p(x)},[x]),{selectedValue:l,selectValue:(0,a.useCallback)(e=>{if(!g({value:e,tabValues:i}))throw Error(`Can't select invalid tab value=${e}`);p(e),m(e),j(e)},[m,j,i]),tabValues:i}}(e);return(0,r.jsxs)("div",{className:(0,i.Z)("tabs-container","tabList__CuJ"),children:[(0,r.jsx)(b,{...n,...e}),(0,r.jsx)(m,{...n,...e})]})}function j(e){let n=(0,p.Z)();return(0,r.jsx)(f,{...e,children:d(e.children)},String(n))}},65:function(e,n,t){t.d(n,{Z:function(){return o},a:function(){return l}});var r=t(7294);let a={},i=r.createContext(a);function l(e){let n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);