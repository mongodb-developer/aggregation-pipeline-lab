"use strict";(self.webpackChunkaggregation_pipeline_workshop=self.webpackChunkaggregation_pipeline_workshop||[]).push([["8270"],{2960:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>o,default:()=>g,toc:()=>d,metadata:()=>a,assets:()=>u,contentTitle:()=>c});var a=JSON.parse('{"id":"using-arrays/search-inside-objects-in-arrays","title":"\uD83D\uDC50 Searching Inside Objects in Arrays","description":"In our books, we\'re using the Attribute Pattern to have different attributes in our documents. As we can see in the sample doc, we have an attributes array, containing several objects, each with the same structure:","source":"@site/docs/40-using-arrays/40-search-inside-objects-in-arrays.mdx","sourceDirName":"40-using-arrays","slug":"/using-arrays/search-inside-objects-in-arrays","permalink":"/aggregation-pipeline-lab/zh/docs/using-arrays/search-inside-objects-in-arrays","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/aggregation-pipeline-lab/blob/main/docs/40-using-arrays/40-search-inside-objects-in-arrays.mdx","tags":[],"version":"current","sidebarPosition":40,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\uD83D\uDC50 Simple Arrays","permalink":"/aggregation-pipeline-lab/zh/docs/using-arrays/simple-match-array"},"next":{"title":"\uD83E\uDDB8 Size of an Array","permalink":"/aggregation-pipeline-lab/zh/docs/using-arrays/array-sizes"}}'),r=t(5893),s=t(65),i=t(7902),l=t(5525);let o={},c="\uD83D\uDC50 Searching Inside Objects in Arrays",u={},d=[{value:"Matching object fields, the simplest way",id:"matching-object-fields-the-simplest-way",level:2},{value:"1. Using $unwind aggregation stage",id:"1-using-unwind-aggregation-stage",level:3},{value:"\uD83E\uDDB8 2. Using $arrayToObject operator",id:"-2-using-arraytoobject-operator",level:3}];function h(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.a)(),...e.components},{Details:t}=n;return t||function(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"-searching-inside-objects-in-arrays",children:"\uD83D\uDC50 Searching Inside Objects in Arrays"})}),"\n",(0,r.jsxs)(n.p,{children:["In our books, we're using the ",(0,r.jsx)(n.a,{href:"https://www.mongodb.com/developer/products/mongodb/attribute-pattern/",children:"Attribute Pattern"})," to have different attributes in our documents. As we can see in the ",(0,r.jsx)(n.a,{href:"/docs/simple-queries/project",children:"sample doc"}),", we have an ",(0,r.jsx)(n.code,{children:"attributes"})," array, containing several objects, each with the same structure:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"attributes: [\n  {\n    key: 'edition',\n    value: '1st'\n  },\n  {\n    key: 'dimensions',\n    value: 'Height: 1.111 Inches, Length: 1.111 Inches, Weight: 0.2 Pounds, Width: 1.111 Inches'\n  },\n  {\n    key: 'isbn13',\n    value: '9780765342508'\n  },\n  {\n    key: 'msrp',\n    value: 6.99\n  },\n  {\n    key: 'isbn',\n    value: '0765342502'\n  },\n  {\n    key: 'isbn10',\n    value: '0765342502'\n  }\n],\n"})}),"\n",(0,r.jsx)(n.h2,{id:"matching-object-fields-the-simplest-way",children:"Matching object fields, the simplest way"}),"\n",(0,r.jsxs)(n.p,{children:["How do we search for all the books that have an MSRP of 9.99? We want books that, inside ",(0,r.jsx)(n.code,{children:"attributes"}),", have an object with key ",(0,r.jsx)(n.code,{children:"msrp"})," and value ",(0,r.jsx)(n.code,{children:"9.99"}),"?"]}),"\n",(0,r.jsxs)(i.Z,{groupId:"aggregations",children:[(0,r.jsx)(l.Z,{value:"atlas",label:"Atlas UI",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'[\n  { $match: {"attributes.key": "msrp", "attributes.value": 9.99} },\n  { $project: {_id: 0, title: 1, year: 1, totalInventory: 1, available: 1, "attributes": 1} }\n]\n'})})}),(0,r.jsx)(l.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'db.books.aggregate([\n  { $match: {"attributes.key": "msrp", "attributes.value": 9.99} },\n  { $project: {_id: 0, title: 1, year: 1, totalInventory: 1, available: 1, "attributes": 1} }\n]);\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"The above example is using the shorthand $and operator, that we can also explicitly write:"}),"\n",(0,r.jsxs)(i.Z,{groupId:"aggregations",children:[(0,r.jsx)(l.Z,{value:"atlas",label:"Atlas UI",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'[ \n  { $match: { $and: [{"attributes.key": "msrp", "attributes.value": 9.99}] } },\n  { $project: {_id: 0, title: 1, year: 1, totalInventory: 1, available: 1, "attributes": 1} }\n]\n'})})}),(0,r.jsx)(l.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'db.books.aggregate([ \n  { $match: {$and: [{"attributes.key": "msrp", "attributes.value": 9.99}]} },\n  { $project: {_id: 0, title: 1, year: 1, totalInventory: 1, available: 1, "attributes": 1} }\n]);\n'})})})]}),"\n",(0,r.jsxs)(n.p,{children:["Find all the books with an MSPR of 9.99 and that have been reprinted (hint: ",(0,r.jsx)(n.code,{children:"edition"})," is ",(0,r.jsx)(n.code,{children:"Reprint"}),"):"]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Answer"}),(0,r.jsx)("div",{children:(0,r.jsxs)(i.Z,{groupId:"aggregations",children:[(0,r.jsx)(l.Z,{value:"atlas",label:"Atlas UI",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'[\n  { $match: \n    {$and: [\n      {"attributes.key": "msrp", "attributes.value": 9.99}, \n      {"attributes.key": "edition", "attributes.value": "Reprint"}] \n    }\n  },\n  { $project: {_id: 0, title: 1, year: 1, totalInventory: 1, available: 1, "attributes": 1} }\n]\n'})})}),(0,r.jsx)(l.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'db.books.aggregate([\n  { $match: \n    {$and: [\n      {"attributes.key": "msrp", "attributes.value": 9.99}, \n      {"attributes.key": "edition", "attributes.value": "Reprint"}] \n    }\n  },\n  { $project: {_id: 0, title: 1, year: 1, totalInventory: 1, available: 1, "attributes": 1} }\n]);\n'})})})]})})]}),"\n",(0,r.jsx)(n.p,{children:"This is okay, but We get a list of documents with a whole bunch of attributes which looks like the following:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'{\n  "_id": "0002005018",\n  "title": "Clara Callan: A novel",\n  "attributes": [\n    {\n      "key": "edition",\n      "value": "1st"\n    },\n    {\n      "key": "dimensions",\n      "value": "Height: 11.11 Inches, Length: 6.11 Inches, Weight: 1 Pounds, Width: 1.11 Inches"\n    },\n    {\n      "key": "isbn13",\n      "value": "9780002005012"\n    },\n    {\n      "key": "msrp",\n      "value": "0.00"\n    },\n    {\n      "key": "isbn",\n      "value": "0002005018"\n    },\n    {\n      "key": "isbn10",\n      "value": "0002005018"\n    }\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"What if we are only interested in the MSRP?"}),"\n",(0,r.jsx)(n.p,{children:"There is more than one way to filter the unncessary keys and values:"}),"\n",(0,r.jsx)(n.h3,{id:"1-using-unwind-aggregation-stage",children:"1. Using $unwind aggregation stage"}),"\n",(0,r.jsx)(n.p,{children:"See the following pipeline:"}),"\n",(0,r.jsxs)(i.Z,{groupId:"aggregations",children:[(0,r.jsx)(l.Z,{value:"atlas",label:"Atlas UI",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'[\n  { $unwind : "$attributes" },\n  { $match: {"attributes.key": "msrp", "attributes.value": 9.99} },\n  { $project: {title: 1, attributes: 1} }\n]\n'})})}),(0,r.jsx)(l.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'db.books.aggregate([\n  { $unwind : "$attributes" },\n  { $match: {"attributes.key": "msrp", "attributes.value": 9.99} },\n  { $project: {title: 1, attributes: 1} }\n]);\n'})})})]}),"\n",(0,r.jsxs)(n.p,{children:["Here, we're getting a copy of each book for each object inside the ",(0,r.jsx)(n.code,{children:"$attributes"}),' array. This "flattens" the array and returns many copies of the same documents, one for each different attribute that we have.']}),"\n",(0,r.jsxs)(n.p,{children:["\uD83D\uDC50 To better understand ",(0,r.jsx)(n.code,{children:"$unwind"}),", run this aggregation."]}),"\n",(0,r.jsxs)(i.Z,{groupId:"aggregations",children:[(0,r.jsxs)(l.Z,{value:"atlas",label:"Atlas UI",children:[(0,r.jsxs)(n.p,{children:["You need to select the ",(0,r.jsx)(n.code,{children:"books"})," collection."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'[\n  { $match: {_id: "0395623650"} },\n  { $unwind : "$attributes" },\n]\n'})})]}),(0,r.jsx)(l.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'db.books.aggregate([\n  { $match: {_id: "0395623650"} },\n  { $unwind : "$attributes" },\n]);\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"You should get one document per attribute of the original book. All fields in these returned documents should be the same, except the ones in attributes."}),"\n",(0,r.jsx)(n.h3,{id:"-2-using-arraytoobject-operator",children:"\uD83E\uDDB8 2. Using $arrayToObject operator"}),"\n",(0,r.jsxs)(n.p,{children:["We can also flatten the ",(0,r.jsx)(n.code,{children:"attributes"})," array into an object using the ",(0,r.jsx)(n.code,{children:"$arrayToObject"})," operator and then use a ",(0,r.jsx)(n.code,{children:"$project"})," stage to filter unwanted fields.\nNote that ",(0,r.jsx)(n.code,{children:"$arrayToObject"})," is not an aggregation stage."]}),"\n",(0,r.jsxs)(i.Z,{groupId:"aggregations",children:[(0,r.jsxs)(l.Z,{value:"atlas",label:"Atlas UI",children:[(0,r.jsxs)(n.p,{children:["You need to select the ",(0,r.jsx)(n.code,{children:"books"})," collection."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"[\n    {\n      $match: {\n        'attributes.key': 'msrp',\n        'attributes.value': 9.99\n      }\n    },\n    {\n      $addFields: {\n        attributes: {\n          $arrayToObject: {\n            $map: {\n              input: '$attributes',\n              as: 'attr',\n              in: {\n                k: '$$attr.key',\n                v: '$$attr.value'\n              }\n            }\n          }\n        }\n      }\n    },\n    {\n      $project: { title: 1, 'attributes.msrp': 1 }\n    }\n]\n"})})]}),(0,r.jsx)(l.Z,{value:"mongodb-shell",label:"MongoDB Shell",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'db.books.aggregate([\n  { $match: {_id: "0395623650"} },\n  { $unwind : "$attributes" },\n]);\n'})})})]}),"\n",(0,r.jsxs)(n.p,{children:["\uD83E\uDDB8 Run the above aggregation to observe the difference in output as compared to using ",(0,r.jsx)(n.code,{children:"$unwind"}),"."]})]})}function g(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},5525:function(e,n,t){t.d(n,{Z:()=>s});var a=t(5893);t(7294);var r=t(4904);function s({children:e,hidden:n,className:t}){return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.Z)("tabItem_Ymn6",t),hidden:n,children:e})}},7902:function(e,n,t){t.d(n,{Z:()=>v});var a=t(5893),r=t(7294),s=t(4904),i=t(9599),l=t(6550),o=t(2e3),c=t(4520),u=t(8341),d=t(6009);function h(e){return r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function g({value:e,tabValues:n}){return n.some(n=>n.value===e)}var b=t(7227);function p({className:e,block:n,selectedValue:t,selectValue:r,tabValues:l}){let o=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),u=e=>{let n=e.currentTarget,a=l[o.indexOf(n)].value;a!==t&&(c(n),r(a))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{let t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{let t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1]}}n?.focus()};return(0,a.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},e),children:l.map(({value:e,label:n,attributes:r})=>(0,a.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{o.push(e)},onKeyDown:d,onClick:u,...r,className:(0,s.Z)("tabs__item","tabItem_LNqP",r?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function j({lazy:e,children:n,selectedValue:t}){let i=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){let e=i.find(e=>e.props.value===t);return e?(0,r.cloneElement)(e,{className:(0,s.Z)("margin-top--md",e.props.className)}):null}return(0,a.jsx)("div",{className:"margin-top--md",children:i.map((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function m(e){let n=function(e){let{defaultValue:n,queryString:t=!1,groupId:a}=e,s=function(e){let{values:n,children:t}=e;return(0,r.useMemo)(()=>{let e=n??h(t).map(({props:{value:e,label:n,attributes:t,default:a}})=>({value:e,label:n,attributes:t,default:a})),a=(0,u.lx)(e,(e,n)=>e.value===n.value);if(a.length>0)throw Error(`Docusaurus error: Duplicate values "${a.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`);return e},[n,t])}(e),[i,b]=(0,r.useState)(()=>(function({defaultValue:e,tabValues:n}){if(0===n.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!g({value:e,tabValues:n}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}let t=n.find(e=>e.default)??n[0];if(!t)throw Error("Unexpected error: 0 tabValues");return t.value})({defaultValue:n,tabValues:s})),[p,j]=function({queryString:e=!1,groupId:n}){let t=(0,l.k6)(),a=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,c._X)(a),(0,r.useCallback)(e=>{if(!a)return;let n=new URLSearchParams(t.location.search);n.set(a,e),t.replace({...t.location,search:n.toString()})},[a,t])]}({queryString:t,groupId:a}),[m,v]=function({groupId:e}){let n=e?`docusaurus.tab.${e}`:null,[t,a]=(0,d.Nk)(n);return[t,(0,r.useCallback)(e=>{n&&a.set(e)},[n,a])]}({groupId:a}),x=(()=>{let e=p??m;return g({value:e,tabValues:s})?e:null})();return(0,o.Z)(()=>{x&&b(x)},[x]),{selectedValue:i,selectValue:(0,r.useCallback)(e=>{if(!g({value:e,tabValues:s}))throw Error(`Can't select invalid tab value=${e}`);b(e),j(e),v(e)},[j,v,s]),tabValues:s}}(e);return(0,a.jsxs)("div",{className:(0,s.Z)("tabs-container","tabList__CuJ"),children:[(0,a.jsx)(p,{...n,...e}),(0,a.jsx)(j,{...n,...e})]})}function v(e){let n=(0,b.Z)();return(0,a.jsx)(m,{...e,children:h(e.children)},String(n))}},65:function(e,n,t){t.d(n,{Z:()=>l,a:()=>i});var a=t(7294);let r={},s=a.createContext(r);function i(e){let n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);